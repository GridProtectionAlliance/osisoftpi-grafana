{"version":3,"file":"module.js","mappings":"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","sources":["webpack://gridprotectionalliance-osisoftpi-datasource/external amd \"@grafana/data\"","webpack://gridprotectionalliance-osisoftpi-datasource/external amd \"@grafana/runtime\"","webpack://gridprotectionalliance-osisoftpi-datasource/external amd \"@grafana/ui\"","webpack://gridprotectionalliance-osisoftpi-datasource/external amd \"lodash\"","webpack://gridprotectionalliance-osisoftpi-datasource/external amd \"react\"","webpack://gridprotectionalliance-osisoftpi-datasource/external amd \"rxjs\"","webpack://gridprotectionalliance-osisoftpi-datasource/webpack/bootstrap","webpack://gridprotectionalliance-osisoftpi-datasource/webpack/runtime/compat get default export","webpack://gridprotectionalliance-osisoftpi-datasource/webpack/runtime/define property getters","webpack://gridprotectionalliance-osisoftpi-datasource/webpack/runtime/hasOwnProperty shorthand","webpack://gridprotectionalliance-osisoftpi-datasource/webpack/runtime/make namespace object","webpack://gridprotectionalliance-osisoftpi-datasource/./config/ConfigEditor.tsx","webpack://gridprotectionalliance-osisoftpi-datasource/./components/Forms.tsx","webpack://gridprotectionalliance-osisoftpi-datasource/./types.ts","webpack://gridprotectionalliance-osisoftpi-datasource/./components/QueryEditorModeSwitcher.tsx","webpack://gridprotectionalliance-osisoftpi-datasource/./query/QueryEditor.tsx","webpack://gridprotectionalliance-osisoftpi-datasource/./helper.ts","webpack://gridprotectionalliance-osisoftpi-datasource/./query/AnnotationsQueryEditor.tsx","webpack://gridprotectionalliance-osisoftpi-datasource/./datasource.ts","webpack://gridprotectionalliance-osisoftpi-datasource/./module.ts"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__781__;","module.exports = __WEBPACK_EXTERNAL_MODULE__531__;","module.exports = __WEBPACK_EXTERNAL_MODULE__7__;","module.exports = __WEBPACK_EXTERNAL_MODULE__241__;","module.exports = __WEBPACK_EXTERNAL_MODULE__959__;","module.exports = __WEBPACK_EXTERNAL_MODULE__269__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import React, { ChangeEvent, PureComponent } from 'react';\nimport { LegacyForms, DataSourceHttpSettings, InlineField, InlineSwitch } from '@grafana/ui';\nimport { DataSourcePluginOptionsEditorProps, DataSourceJsonData, DataSourceSettings } from '@grafana/data';\nimport { PIWebAPIDataSourceJsonData } from '../types';\n\nconst { FormField } = LegacyForms;\n\ninterface Props extends DataSourcePluginOptionsEditorProps<PIWebAPIDataSourceJsonData, {}> {}\n\nconst coerceOptions = (\n  options: DataSourceSettings<PIWebAPIDataSourceJsonData, {}>\n): DataSourceSettings<PIWebAPIDataSourceJsonData, {}> => {\n  return {\n    ...options,\n    jsonData: {\n      ...options.jsonData,\n      url: options.url,\n    },\n  };\n};\n\ninterface State {}\n\nexport class PIWebAPIConfigEditor extends PureComponent<Props, State> {\n  onPIServerChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onOptionsChange, options } = this.props;\n    const jsonData = {\n      ...options.jsonData,\n      piserver: event.target.value,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n\n  onAFServerChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onOptionsChange, options } = this.props;\n    const jsonData = {\n      ...options.jsonData,\n      afserver: event.target.value,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n\n  onAFDatabaseChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onOptionsChange, options } = this.props;\n    const jsonData = {\n      ...options.jsonData,\n      afdatabase: event.target.value,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n\n  onHttpOptionsChange = (options: DataSourceSettings<DataSourceJsonData, {}>) => {\n    const { onOptionsChange } = this.props;\n    onOptionsChange(coerceOptions(options));\n  };\n\n  onPiPointChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onOptionsChange, options } = this.props;\n    const jsonData = {\n      ...options.jsonData,\n      piserver: event.target.checked ? options.jsonData.piserver : '',\n      pipoint: event.target.checked,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n\n  onNewFormatChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onOptionsChange, options } = this.props;\n    const jsonData = {\n      ...options.jsonData,\n      newFormat: event.target.checked,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n\n  onUseUnitChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onOptionsChange, options } = this.props;\n    const jsonData = {\n      ...options.jsonData,\n      useUnit: event.target.checked,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n\n  onUseExperimentalChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onOptionsChange, options } = this.props;\n    const jsonData = {\n      ...options.jsonData,\n      useExperimental : event.target.checked,\n      useStreaming : event.target.checked ? options.jsonData.useStreaming : false,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n\n  onUseStreamingChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onOptionsChange, options } = this.props;\n    const jsonData = {\n      ...options.jsonData,\n      useStreaming: event.target.checked,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n\n  render() {\n    const { options: originalOptions } = this.props;\n    const options = coerceOptions(originalOptions);\n\n    return (\n      <div>\n        <DataSourceHttpSettings\n          defaultUrl=\"https://server.name/piwebapi\"\n          dataSourceConfig={options}\n          onChange={this.onHttpOptionsChange}\n          showAccessOptions\n        />\n\n        <h3 className=\"page-heading\">Custom Configuration</h3>\n\n        <div className=\"gf-form-group\">\n          <div className=\"gf-form-inline\">\n            <InlineField label=\"Enable PI Points in Query\" labelWidth={24}>\n              <InlineSwitch value={options.jsonData.pipoint} onChange={this.onPiPointChange} />\n            </InlineField>\n          </div>\n          <div className=\"gf-form-inline\">\n            <InlineField label=\"Enable New Data Format\" labelWidth={24}>\n              <InlineSwitch value={options.jsonData.newFormat} onChange={this.onNewFormatChange} />\n            </InlineField>\n          </div>\n          <div className=\"gf-form-inline\">\n            <InlineField label=\"Enable Unit in Data\" labelWidth={24}>\n              <InlineSwitch value={options.jsonData.useUnit} onChange={this.onUseUnitChange} />\n            </InlineField>\n          </div>\n          <div className=\"gf-form-inline\">\n            <InlineField label=\"Enable Experimental Features\" labelWidth={24}>\n              <InlineSwitch value={options.jsonData.useExperimental} onChange={this.onUseExperimentalChange} />\n            </InlineField>\n          </div>\n          {options.jsonData.useExperimental && (\n            <div className=\"gf-form-inline\">\n              <InlineField label=\"Enable Steaming Support\" labelWidth={24}>\n                <InlineSwitch value={options.jsonData.useStreaming} onChange={this.onUseStreamingChange} />\n              </InlineField>\n            </div>\n          )}\n        </div>\n\n        <h3 className=\"page-heading\">PI/AF Connection Details</h3>\n\n        <div className=\"gf-form-group\">\n          {options.jsonData.pipoint && (\n            <div className=\"gf-form\">\n              <FormField\n                label=\"PI Server\"\n                labelWidth={10}\n                inputWidth={25}\n                onChange={this.onPIServerChange}\n                value={options.jsonData.piserver || ''}\n                placeholder=\"Default PI Server to use for data requests\"\n              />\n            </div>\n          )}\n          <div className=\"gf-form\">\n            <FormField\n              label=\"AF Server\"\n              labelWidth={10}\n              inputWidth={25}\n              onChange={this.onAFServerChange}\n              value={options.jsonData.afserver || ''}\n              placeholder=\"Default AF Server to use for data requests\"\n            />\n          </div>\n          <div className=\"gf-form\">\n            <FormField\n              label=\"AF Database\"\n              labelWidth={10}\n              inputWidth={25}\n              onChange={this.onAFDatabaseChange}\n              value={options.jsonData.afdatabase || ''}\n              placeholder=\"Default AF Database server for AF queries\"\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { InputHTMLAttributes, FunctionComponent } from 'react';\nimport { InlineFormLabel } from '@grafana/ui';\n\nexport interface Props extends InputHTMLAttributes<HTMLInputElement> {\n  label: string;\n  tooltip?: string;\n  labelWidth?: number;\n  children?: React.ReactNode;\n  queryEditor?: JSX.Element;\n}\n\nexport const QueryField: FunctionComponent<Partial<Props>> = ({ label, labelWidth = 12, tooltip, children }) => (\n  <>\n    <InlineFormLabel width={labelWidth} tooltip={tooltip}>\n      {label}\n    </InlineFormLabel>\n    {children}\n  </>\n);\n\nexport const QueryRowTerminator = () => {\n  return (\n    <div className=\"gf-form gf-form--grow\">\n      <div className=\"gf-form-label gf-form-label--grow\" />\n    </div>\n  );\n};\n\nexport const QueryInlineField = ({ ...props }) => {\n  return (\n    <QueryEditorRow>\n      <QueryField {...props} />\n    </QueryEditorRow>\n  );\n};\n\nexport const QueryEditorRow = (props: Partial<Props>) => {\n  return (\n    <div className=\"gf-form-inline\">\n      {props.children}\n      <QueryRowTerminator />\n    </div>\n  );\n};\n\nexport const QueryRawInlineField = ({ ...props }) => {\n  return (\n    <QueryRawEditorRow>\n      <QueryField {...props} />\n    </QueryRawEditorRow>\n  );\n};\n\nexport const QueryRawEditorRow = (props: Partial<Props>) => {\n  return <>{props.children}</>;\n};\n","import { DataQuery } from '@grafana/schema';\nimport { DataSourceJsonData } from '@grafana/data';\n\nexport interface PiwebapiElementPath {\n  path: string;\n  variable: string;\n}\n\nexport interface PiwebapiInternalRsp {\n  data: PiwebapiRsp;\n  status: number;\n  url: string;\n}\n\nexport interface PiwebapiRsp {\n  Name?: string;\n  InstanceType?: string;\n  Items?: PiwebapiRsp[];\n  WebId?: string;\n  HasChildren?: boolean;\n  Type?: string;\n  DefaultUnitsName?: string;\n  Description?: string;\n  Path?: string;\n}\n\nexport interface PiDataServer {\n  name: string | undefined;\n  webid: string | undefined;\n}\n\nexport interface PIWebAPISelectableValue {\n  webId?: string;\n  value?: string;\n  type?: string;\n  expandable?: boolean;\n}\n\nexport interface PIWebAPIAnnotationsQuery extends DataQuery {\n  target: string;\n}\n\nexport interface PIWebAPIQuery extends DataQuery {\n  target?: string;\n  elementPath?: string;\n  attributes?: any[];\n  segments?: any[];\n  isPiPoint?: boolean;\n  isAnnotation?: boolean;\n  webid?: string;\n  display?: any;\n  interpolate?: any;\n  recordedValues?: any;\n  digitalStates?: any;\n  enableStreaming: any;\n  useLastValue?: any;\n  useUnit?: any;\n  regex?: any;\n  summary?: {nodata?: string, types?: any[], basis?: string, interval?: string};\n  expression?: string;\n  rawQuery?: boolean;\n  query?: string;\n  // annotations items\n  database?: PiwebapiRsp;\n  template?: PiwebapiRsp;\n  showEndTime?: boolean;\n  attribute?: any;\n  nameFilter?: string;\n  categoryName?: string;\n}\n\nexport const defaultQuery: Partial<PIWebAPIQuery> = {\n  target: ';',\n  attributes: [],\n  segments: [],\n  regex: { enable: false },\n  summary: { types: [], basis: 'EventWeighted', interval: '', nodata: 'Null' },\n  expression: '',\n  interpolate: { enable: false },\n  useLastValue: { enable: false },\n  recordedValues: { enable: false },\n  digitalStates: { enable: false },\n  enableStreaming: { enable: false },\n  useUnit: { enable: false },\n  isPiPoint: false,\n};\n\n/**\n * These are options configured for each DataSource instance\n */\nexport interface PIWebAPIDataSourceJsonData extends DataSourceJsonData {\n  url?: string;\n  access?: string;\n  piserver?: string;\n  afserver?: string;\n  afdatabase?: string;\n  pipoint?: boolean;\n  newFormat?: boolean;\n  useUnit?: boolean;\n  useExperimental?: boolean;\n  useStreaming?: boolean;\n}\n\n/**\n * Value that is used in the backend, but never sent over HTTP to the frontend\n */\nexport interface PIWebAPISecureJsonData {\n  apiKey?: string;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Button, ConfirmModal } from '@grafana/ui';\n\ntype Props = {\n  isRaw: boolean;\n  onChange: (newIsRaw: boolean) => void;\n};\n\nexport const QueryEditorModeSwitcher = ({ isRaw, onChange }: Props): JSX.Element => {\n  const [isModalOpen, setModalOpen] = useState(false);\n\n  useEffect(() => {\n    // if the isRaw changes, we hide the modal\n    setModalOpen(false);\n  }, [isRaw]);\n\n  if (isRaw) {\n    return (\n      <>\n        <Button\n          aria-label=\"Switch to visual editor\"\n          icon=\"pen\"\n          variant=\"secondary\"\n          type=\"button\"\n          onClick={() => {\n            // we show the are-you-sure modal\n            setModalOpen(true);\n          }}\n        ></Button>\n        <ConfirmModal\n          isOpen={isModalOpen}\n          title=\"Switch to visual editor mode\"\n          body=\"Are you sure to switch to visual editor mode? You will lose the changes done in raw query mode.\"\n          confirmText=\"Yes, switch to editor mode\"\n          dismissText=\"No, stay in raw query mode\"\n          onConfirm={() => {\n            onChange(false);\n          }}\n          onDismiss={() => {\n            setModalOpen(false);\n          }}\n        />\n      </>\n    );\n  } else {\n    return (\n      <Button\n        aria-label=\"Switch to text editor\"\n        icon=\"pen\"\n        variant=\"secondary\"\n        type=\"button\"\n        onClick={() => {\n          onChange(true);\n        }}\n      ></Button>\n    );\n  }\n};\n","import { each, filter, forOwn, join, reduce, map, slice, remove, defaults } from 'lodash';\n\nimport React, { PureComponent, ChangeEvent } from 'react';\nimport { Icon, InlineField, InlineFieldRow, InlineSwitch, Input, SegmentAsync, Segment } from '@grafana/ui';\nimport { QueryEditorProps, SelectableValue, TypedVariableModel } from '@grafana/data';\n\nimport { PiWebAPIDatasource } from '../datasource';\nimport { QueryInlineField, QueryRawInlineField, QueryRowTerminator } from '../components/Forms';\nimport { PIWebAPISelectableValue, PIWebAPIDataSourceJsonData, PIWebAPIQuery, defaultQuery } from '../types';\nimport { QueryEditorModeSwitcher } from 'components/QueryEditorModeSwitcher';\n\nconst LABEL_WIDTH = 24;\nconst MIN_ELEM_INPUT_WIDTH = 200;\nconst MIN_ATTR_INPUT_WIDTH = 250;\n\ninterface State {\n  isPiPoint: boolean;\n  segments: Array<SelectableValue<PIWebAPISelectableValue>>;\n  attributes: Array<SelectableValue<PIWebAPISelectableValue>>;\n  summaries: Array<SelectableValue<PIWebAPISelectableValue>>;\n  attributeSegment: SelectableValue<PIWebAPISelectableValue>;\n  summarySegment: SelectableValue<PIWebAPISelectableValue>;\n  calculationBasisSegment: SelectableValue<PIWebAPISelectableValue>;\n  noDataReplacementSegment: SelectableValue<PIWebAPISelectableValue>;\n}\n\ntype Props = QueryEditorProps<PiWebAPIDatasource, PIWebAPIQuery, PIWebAPIDataSourceJsonData>;\n\nconst REMOVE_LABEL = '-REMOVE-';\n\nconst CustomLabelComponent = (props: any) => {\n  if (props.value) {\n    return (\n      <div className={`gf-form-label ${props.value.type === 'template' ? 'query-keyword' : ''}`}>\n        {props.label ?? '--no label--'}\n      </div>\n    );\n  }\n  return (\n    <a className=\"gf-form-label query-part\">\n      <Icon name=\"plus\" />\n    </a>\n  );\n};\n\nexport class PIWebAPIQueryEditor extends PureComponent<Props, State> {\n  error: any;\n  piServer: any[] = [];\n  availableAttributes: any = {};\n  summaryTypes: string[];\n  calculationBasis: string[];\n  noDataReplacement: string[];\n  state: State = {\n    isPiPoint: false,\n    segments: [],\n    attributes: [],\n    summaries: [],\n    attributeSegment: {},\n    summarySegment: {},\n    calculationBasisSegment: {},\n    noDataReplacementSegment: {},\n  };\n\n  constructor(props: any) {\n    super(props);\n    this.onSegmentChange = this.onSegmentChange.bind(this);\n    this.calcBasisValueChanged = this.calcBasisValueChanged.bind(this);\n    this.calcNoDataValueChanged = this.calcNoDataValueChanged.bind(this);\n    this.onSummaryAction = this.onSummaryAction.bind(this);\n    this.onSummaryValueChanged = this.onSummaryValueChanged.bind(this);\n    this.onAttributeAction = this.onAttributeAction.bind(this);\n    this.onAttributeChange = this.onAttributeChange.bind(this);\n\n    this.summaryTypes = [\n      // 'None', // A summary type is not specified.\n      'Total', // A totalization over the time range.\n      'Average', // The average value over the time range.\n      'Minimum', // The minimum value over the time range.\n      'Maximum', // The maximum value over the time range.\n      'Range', // The range value over the time range (minimum-maximum).\n      'StdDev', // The standard deviation over the time range.\n      'PopulationStdDev', // The population standard deviation over the time range.\n      'Count', // The sum of event count over the time range when calculation basis is event weighted. The sum of event time duration over the time range when calculation basis is time weighted.\n      'PercentGood', // Percent of data with good value during the calculation period. For time weighted calculations, the percentage is based on time. For event weighted calculations, the percent is based on event count.\n      'All', // A convenience for requesting all available summary calculations.\n      'AllForNonNumeric', // A convenience for requesting all available summary calculations for non-numeric data.\n    ];\n\n    this.calculationBasis = [\n      'TimeWeighted', // Weight the values in the calculation by the time over which they apply. Interpolation is based on whether the attribute is stepped. Interpolated events are generated at the boundaries if necessary.\n      'EventWeighted', // Evaluate values with equal weighting for each event. No interpolation is done. There must be at least one event within the time range to perform a successful calculation. Two events are required for standard deviation. In handling events at the boundary of the calculation, the AFSDK uses following rules:\n      'TimeWeightedContinuous', // Apply weighting as in TimeWeighted, but do all interpolation between values as if they represent continuous data, (standard interpolation) regardless of whether the attribute is stepped.\n      'TimeWeightedDiscrete', // Apply weighting as in TimeWeighted but interpolation between values is performed as if they represent discrete, unrelated values (stair step plot) regardless of the attribute is stepped.\n      'EventWeightedExcludeMostRecentEvent', // The calculation behaves the same as _EventWeighted_, except in the handling of events at the boundary of summary intervals in a multiple intervals calculation. Use this option to prevent events at the intervals boundary from being double count at both intervals. With this option, events at the end time (most recent time) of an interval is not used in that interval.\n      'EventWeightedExcludeEarliestEvent', // Similar to the option _EventWeightedExcludeMostRecentEvent_. Events at the start time(earliest time) of an interval is not used in that interval.\n      'EventWeightedIncludeBothEnds', // Events at both ends of the interval boundaries are included in the event weighted calculation.\n    ];\n\n    this.noDataReplacement = [\n      'Null', // replace with nulls\n      'Drop', // drop items\n      'Previous', // use previous value if available\n      '0', // replace with 0\n      'Keep', // Keep value\n    ];\n  }\n\n  // is selected segment empty\n  isValueEmpty(value: PIWebAPISelectableValue | undefined) {\n    return !value || !value.value || !value.value.length || value.value === REMOVE_LABEL;\n  }\n\n  segmentChangeValue = (segments: Array<SelectableValue<PIWebAPISelectableValue>>) => {\n    const query = this.props.query;\n    this.setState({ segments }, () => this.onChange({ ...query, segments }));\n  };\n\n  attributeChangeValue = (attributes: Array<SelectableValue<PIWebAPISelectableValue>>): Promise<void> => {\n    const query = this.props.query;\n    return new Promise((resolve) => this.setState({ attributes }, () => {\n      this.onChange({ ...query, attributes })\n      resolve();\n    }));\n  };\n\n  // summary calculation basis change event\n  calcBasisValueChanged(segment: SelectableValue<PIWebAPISelectableValue>) {\n    const metricsQuery = this.props.query as PIWebAPIQuery;\n    const summary = metricsQuery.summary;\n    if (summary) {\n      summary.basis = segment.value?.value;\n    }\n    this.onChange({ ...metricsQuery, summary });\n  }\n  // get summary calculation basis user interface segments\n  getCalcBasisSegments() {\n    const segments = map(this.calculationBasis, (item: string) => {\n      let selectableValue: SelectableValue<PIWebAPISelectableValue> = {\n        label: item,\n        value: {\n          value: item,\n          expandable: true,\n        },\n      };\n      return selectableValue;\n    });\n    return segments;\n  }\n\n  // no data change event\n  calcNoDataValueChanged(segment: SelectableValue<PIWebAPISelectableValue>) {\n    const metricsQuery = this.props.query as PIWebAPIQuery;\n    const summary = metricsQuery.summary;\n    if (summary) {\n      summary.nodata = segment.value?.value;\n    }\n    this.onChange({ ...metricsQuery, summary });\n  }\n  // get no data user interface segments\n  getNoDataSegments() {\n    const segments = map(this.noDataReplacement, (item: string) => {\n      let selectableValue: SelectableValue<PIWebAPISelectableValue> = {\n        label: item,\n        value: {\n          value: item,\n          expandable: true,\n        },\n      };\n      return selectableValue;\n    });\n    return segments;\n  }\n\n  // summary query change event\n  onSummaryValueChanged(item: SelectableValue<PIWebAPISelectableValue>, index: number) {\n    const summaries = this.state.summaries.slice(0) as Array<SelectableValue<PIWebAPISelectableValue>>;\n    summaries[index] = item;\n    if (this.isValueEmpty(item.value)) {\n      summaries.splice(index, 1);\n    }\n    this.setState({ summaries }, this.stateCallback);\n  }\n  // get the list of summaries available\n  getSummarySegments() {\n    const summaryTypes = filter(this.summaryTypes, (type) => {\n      return this.state.summaries.map((s) => s.value?.value).indexOf(type) === -1;\n    });\n\n    const segments = map(summaryTypes, (item: string) => {\n      let selectableValue: SelectableValue<PIWebAPISelectableValue> = {\n        label: item,\n        value: {\n          value: item,\n          expandable: true,\n        },\n      };\n      return selectableValue;\n    });\n\n    segments.unshift({\n      label: REMOVE_LABEL,\n      value: {\n        value: REMOVE_LABEL,\n      },\n    });\n\n    return segments;\n  }\n\n  // remove a summary from the user interface and the query\n  removeSummary(part: SelectableValue<PIWebAPISelectableValue>) {\n    const summaries = filter(this.state.summaries, (item: SelectableValue<PIWebAPISelectableValue>) => {\n      return item !== part;\n    });\n    this.setState({ summaries });\n  }\n  // add a new summary to the query\n  onSummaryAction(item: SelectableValue<PIWebAPISelectableValue>) {\n    const summaries = this.state.summaries.slice(0) as Array<SelectableValue<PIWebAPISelectableValue>>;\n    // if value is not empty, add new attribute segment\n    if (!this.isValueEmpty(item.value)) {\n      let selectableValue: SelectableValue<PIWebAPISelectableValue> = {\n        label: item.label,\n        value: {\n          value: item.value?.value,\n          expandable: true,\n        },\n      };\n      summaries.push(selectableValue);\n    }\n    this.setState({ summarySegment: {}, summaries }, this.stateCallback);\n  }\n\n  // remove an attribute from the query\n  removeAttribute(part: SelectableValue<PIWebAPISelectableValue>) {\n    const attributes = filter(this.state.attributes, (item: SelectableValue<PIWebAPISelectableValue>) => {\n      return item !== part;\n    });\n    this.attributeChangeValue(attributes);\n  }\n  // add an attribute to the query\n  onAttributeAction(item: SelectableValue<PIWebAPISelectableValue>) {\n    const { query } = this.props;\n    const attributes = this.state.attributes.slice(0);\n    // if value is not empty, add new attribute segment\n    if (!this.isValueEmpty(item.value)) {\n      let selectableValue: SelectableValue<PIWebAPISelectableValue> = {\n        label: item.label,\n        value: {\n          value: item.value?.value,\n          expandable: !query.isPiPoint,\n        },\n      };\n      attributes.push(selectableValue);\n    }\n    this.attributeChangeValue(attributes);\n  }\n\n  // pi point change event\n  onPiPointChange = (item: SelectableValue<PIWebAPISelectableValue>, index: number) => {\n    let attributes = this.state.attributes.slice(0);\n\n    if (item.label === REMOVE_LABEL) {\n      remove(attributes, (value, n) => n === index);\n    } else {\n      // set current value\n      attributes[index] = item;\n    }\n\n    this.checkPiPointSegments(item, attributes);\n  };\n  // attribute change event\n  onAttributeChange = (item: SelectableValue<PIWebAPISelectableValue>, index: number) => {\n    let attributes = this.state.attributes.slice(0);\n\n    // ignore if no change\n    if (attributes[index].label === item.value?.value) {\n      return;\n    }\n\n    // set current value\n    attributes[index] = item;\n\n    this.checkAttributeSegments(attributes, this.state.segments);\n  };\n  // segment change\n  onSegmentChange = (item: SelectableValue<PIWebAPISelectableValue>, index: number) => {\n    const { query } = this.props;\n    let segments = this.state.segments.slice(0);\n\n    // ignore if no change\n    if (segments[index].label === item.value?.value) {\n      return;\n    }\n\n    // reset attributes list\n    this.setState({ attributes: [] }, () => {\n      if (item.label === REMOVE_LABEL) {\n        segments = slice(segments, 0, index);\n        this.checkAttributeSegments([], segments).then(() => {\n          if (segments.length === 0) {\n            segments.push({\n              label: '',\n            });\n          } else if (!!segments[segments.length - 1].value?.expandable) {\n            segments.push({\n              label: 'Select Element',\n              value: {\n                value: '-Select Element-',\n              },\n            });\n          }\n          if (query.isPiPoint) {\n            this.piServer = [];\n          }\n          this.segmentChangeValue(segments);\n        });\n        return;\n      }\n\n      // set current value\n      segments[index] = item;\n\n      // Accept only one PI server\n      if (query.isPiPoint) {\n        this.piServer.push(item);\n        this.segmentChangeValue(segments);\n        return;\n      }\n\n      // changed internal selection\n      if (index < segments.length - 1) {\n        segments = slice(segments, 0, index + 1);\n      }\n      this.checkAttributeSegments([], segments).then(() => {\n        // add new options\n        if (!!item.value?.expandable) {\n          segments.push({\n            label: 'Select Element',\n            value: {\n              value: '-Select Element-',\n            },\n          });\n        }\n        this.segmentChangeValue(segments);\n      });\n    });\n  };\n\n  // get a ui segment for the attributes\n  getElementSegments = (\n    index: number,\n    currentSegment?: Array<SelectableValue<PIWebAPISelectableValue>>\n  ): Promise<Array<SelectableValue<PIWebAPISelectableValue>>> => {\n    const { datasource, query, data } = this.props;\n    const ctrl = this;\n    const findQuery = query.isPiPoint\n      ? { type: 'dataserver' }\n      : {\n          path: this.getSegmentPathUpTo(currentSegment ?? this.state.segments.slice(0), index),\n          afServerWebId: this.state.segments.length > 0 && this.state.segments[0].value ? this.state.segments[0].value.webId : undefined,\n        };\n\n    if (!query.isPiPoint) {\n      if (datasource.afserver?.name && index === 0) {\n        return Promise.resolve([\n          {\n            label: datasource.afserver.name,\n            value: {\n              value: datasource.afserver.name,\n              expandable: true,\n            },\n          },\n        ]);\n      }\n      if (datasource.afserver?.name && datasource.afdatabase?.name && index === 1) {\n        return Promise.resolve([\n          {\n            label: datasource.afdatabase.name,\n            value: {\n              value: datasource.afdatabase.name,\n              expandable: true,\n            },\n          },\n        ]);\n      }\n    }\n    return datasource\n      .metricFindQuery(findQuery, Object.assign(data?.request?.scopedVars ?? {}, { isPiPoint: query.isPiPoint }))\n      .then((items: any[]) => {\n        const altSegments = map(items, (item: any) => {\n          let selectableValue: SelectableValue<PIWebAPISelectableValue> = {\n            label: item.text,\n            value: {\n              webId: item.WebId,\n              value: item.text,\n              expandable: !query.isPiPoint && item.expandable,\n            },\n          };\n          return selectableValue;\n        });\n\n        if (altSegments.length === 0) {\n          return altSegments;\n        }\n\n        // add template variables\n        const variables = datasource.templateSrv.getVariables();\n        each(variables, (variable: TypedVariableModel) => {\n          let selectableValue: SelectableValue<PIWebAPISelectableValue> = {\n            label: '${' + variable.name + '}',\n            value: {\n              type: 'template',\n              value: '${' + variable.name + '}',\n              expandable: !query.isPiPoint,\n            },\n          };\n          altSegments.unshift(selectableValue);\n        });\n\n        altSegments.unshift({\n          label: REMOVE_LABEL,\n          value: {\n            value: REMOVE_LABEL,\n          },\n        });\n\n        return altSegments;\n      })\n      .catch((err: any) => {\n        ctrl.error = err.message || 'Failed to issue metric query';\n        return [];\n      });\n  };\n\n  // get the list of attributes for the user interface - PI\n  getAttributeSegmentsPI = (attributeText?: string): Promise<Array<SelectableValue<PIWebAPISelectableValue>>> => {\n    const { datasource, query, data } = this.props;\n    const ctrl = this;\n    const findQuery = {\n      path: '',\n      webId: this.getSelectedPIServer(),\n      pointName: (attributeText ?? '') + '*',\n      type: 'pipoint',\n    };\n    let segments: Array<SelectableValue<PIWebAPISelectableValue>> = [];\n    segments.push({\n      label: REMOVE_LABEL,\n      value: {\n        value: REMOVE_LABEL,\n      },\n    });\n    return datasource\n      .metricFindQuery(findQuery, Object.assign(data?.request?.scopedVars ?? {}, { isPiPoint: query.isPiPoint }))\n      .then((items: any[]) => {\n        segments = map(items, (item: any) => {\n          let selectableValue: SelectableValue<PIWebAPISelectableValue> = {\n            path: item.Path,\n            label: item.text,\n            value: {\n              value: item.text,\n              expandable: false,\n            },\n          };\n          return selectableValue;\n        });\n        if (!!attributeText && attributeText.length > 0) {\n          segments.unshift({\n            label: attributeText,\n            value: {\n              value: attributeText,\n              expandable: false,\n            },\n          });\n        }\n        // add template variables\n        const variables = datasource.templateSrv.getVariables();\n        each(variables, (variable: TypedVariableModel) => {\n          let selectableValue: SelectableValue<PIWebAPISelectableValue> = {\n            label: '${' + variable.name + '}',\n            value: {\n              type: 'template',\n              value: '${' + variable.name + '}',\n              expandable: !query.isPiPoint,\n            },\n          };\n          segments.unshift(selectableValue);\n        });\n        return segments;\n      })\n      .catch((err: any) => {\n        ctrl.error = err.message || 'Failed to issue metric query';\n        return segments;\n      });\n  };\n\n  // get the list of attributes for the user interface - AF\n  getAttributeSegmentsAF = (attributeText?: string): Array<SelectableValue<PIWebAPISelectableValue>> => {\n    const ctrl = this;\n    let segments: Array<SelectableValue<PIWebAPISelectableValue>> = [];\n\n    segments.push({\n      label: REMOVE_LABEL,\n      value: {\n        value: REMOVE_LABEL,\n      },\n    });\n\n    forOwn(ctrl.availableAttributes, (val: any, key: string) => {\n      let selectableValue: SelectableValue<PIWebAPISelectableValue> = {\n        label: key,\n        value: {\n          value: key,\n          expandable: true,\n        },\n      };\n      segments.push(selectableValue);\n    });\n\n    return segments;\n  };\n\n  // build data from target string\n  buildFromTarget = (\n    query: PIWebAPIQuery,\n    segmentsArray: Array<SelectableValue<PIWebAPISelectableValue>>,\n    attributesArray: Array<SelectableValue<PIWebAPISelectableValue>>\n  ) => {\n    const splitAttributes = query.target!.split(';');\n    const splitElements = splitAttributes.length > 0 ? splitAttributes[0].split('\\\\') : [];\n\n    if (splitElements.length > 1 || (splitElements.length === 1 && splitElements[0] !== '')) {\n      // remove element hierarchy from attribute collection\n      splitAttributes.splice(0, 1);\n\n      each(splitElements, (item, _) => {\n        segmentsArray.push({\n          label: item,\n          value: {\n            type: item.match(/\\${\\w+}/gi) ? 'template' : undefined,\n            value: item,\n            expandable: true,\n          },\n        });\n      });\n      each(splitAttributes, (item, _) => {\n        if (item !== '') {\n          // set current value\n          attributesArray.push({\n            label: item,\n            value: {\n              value: item,\n              expandable: false,\n            },\n          });\n        }\n      });\n      return this.getElementSegments(splitElements.length + 1, segmentsArray).then((elements) => {\n        if (elements.length > 0) {\n          segmentsArray.push({\n            label: 'Select Element',\n            value: {\n              value: '-Select Element-',\n            },\n          });\n        }\n        return segmentsArray;\n      });\n    }\n    return Promise.resolve(segmentsArray);\n  };\n\n  /**\n   * Gets the segment information and parses it to a string.\n   *\n   * @param {any} index - Last index of segment to use.\n   * @returns - AF Path or PI Point name.\n   *\n   * @memberOf PIWebAPIQueryEditor\n   */\n  getSegmentPathUpTo(segments: Array<SelectableValue<PIWebAPISelectableValue>>, index: number): string {\n    const arr = segments.slice(0, index);\n\n    return reduce(\n      arr,\n      (result: any, segment: SelectableValue<PIWebAPISelectableValue>) => {\n        if (!segment.value) {\n          return '';\n        }\n        if (!segment.value.value?.startsWith('-Select')) {\n          return result ? result + '\\\\' + segment.value.value : segment.value.value;\n        }\n        return result;\n      },\n      ''\n    );\n  }\n\n  /**\n   * Get the current AF Element's child attributes. Validates when the element selection changes.\n   *\n   * @returns - Collection of attributes.\n   *\n   * @memberOf PIWebAPIQueryEditor\n   */\n  checkAttributeSegments(\n    attributes: Array<SelectableValue<PIWebAPISelectableValue>>,\n    segments: Array<SelectableValue<PIWebAPISelectableValue>>\n  ): Promise<any> {\n    const { datasource, data } = this.props;\n    const ctrl = this;\n    const findQuery = {\n      path: this.getSegmentPathUpTo(segments.slice(0), segments.length),\n      type: 'attributes',\n    };\n    return datasource\n      .metricFindQuery(findQuery, Object.assign(data?.request?.scopedVars ?? {}, { isPiPoint: false }))\n      .then((attributesResponse: any) => {\n        const validAttributes: any = {};\n\n        each(attributesResponse, (attribute: any) => {\n          validAttributes[attribute.Path.substring(attribute.Path.indexOf('|') + 1)] = attribute.WebId;\n        });\n\n        const filteredAttributes = filter(attributes, (attrib: SelectableValue<PIWebAPISelectableValue>) => {\n          const changedValue = datasource.templateSrv.replace(attrib.value?.value);\n          return validAttributes[changedValue] !== undefined;\n        });\n\n        ctrl.availableAttributes = validAttributes;\n        return this.attributeChangeValue(filteredAttributes);\n      })\n      .catch((err: any) => {\n        ctrl.error = err.message || 'Failed to issue metric query';\n        return this.attributeChangeValue(attributes);\n      });\n  }\n\n  /**\n   * Get PI points from server.\n   *\n   * @returns - Collection of attributes.\n   *\n   * @memberOf PIWebAPIQueryEditor\n   */\n  checkPiPointSegments(\n    attribute: SelectableValue<PIWebAPISelectableValue>,\n    attributes: Array<SelectableValue<PIWebAPISelectableValue>>\n  ) {\n    const { datasource, data } = this.props;\n    const ctrl = this;\n    const findQuery = {\n      path: attribute.path,\n      webId: ctrl.getSelectedPIServer(),\n      pointName: attribute.label,\n      type: 'pipoint',\n    };\n    return datasource\n      .metricFindQuery(findQuery, Object.assign(data?.request?.scopedVars ?? {}, { isPiPoint: true }))\n      .then(() => {\n        return ctrl.attributeChangeValue(attributes);\n      })\n      .catch((err: any) => {\n        ctrl.error = err.message || 'Failed to issue metric query';\n        return ctrl.attributeChangeValue([]);\n      });\n  }\n\n  /**\n   * Gets the webid of the current selected pi data server.\n   *\n   * @memberOf PIWebAPIQueryEditor\n   */\n  getSelectedPIServer() {\n    let webID = '';\n\n    this.piServer.forEach((s) => {\n      const parts = this.props.query.target!.split(';');\n      if (parts.length >= 2) {\n        if (parts[0] === s.text) {\n          webID = s.WebId;\n          return;\n        }\n      }\n    });\n    return this.piServer.length > 0 ? this.piServer[0].value?.webId : webID;\n  }\n\n  /**\n   * Queries PI Web API for child elements and attributes when the raw query text editor is changed.\n   *\n   * @memberOf PIWebAPIQueryEditor\n   */\n  textEditorChanged() {\n    const { query } = this.props;\n    const splitAttributes = query.target!.split(';');\n    const splitElements = splitAttributes.length > 0 ? splitAttributes[0].split('\\\\') : [];\n\n    let segments: Array<SelectableValue<PIWebAPISelectableValue>> = [];\n    let attributes: Array<SelectableValue<PIWebAPISelectableValue>> = [];\n\n    if (splitElements.length > 1 || (splitElements.length === 1 && splitElements[0] !== '')) {\n      // remove element hierarchy from attribute collection\n      splitAttributes.splice(0, 1);\n\n      each(splitElements, (item, _) => {\n        segments.push({\n          label: item,\n          value: {\n            type: item.match(/\\${\\w+}/gi) ? 'template' : undefined,\n            value: item,\n            expandable: true,\n          },\n        });\n      });\n      each(splitAttributes, function (item, index) {\n        if (item !== '') {\n          attributes.push({\n            label: item,\n            value: {\n              value: item,\n              expandable: false,\n            },\n          });\n        }\n      });\n      this.getElementSegments(splitElements.length + 1, segments)\n        .then((elements) => {\n          if (elements.length > 0) {\n            segments.push({\n              label: 'Select Element',\n              value: {\n                value: '-Select Element-',\n              },\n            });\n          }\n        })\n        .then(() => {\n          this.updateArray(segments, attributes, this.state.summaries, query.isPiPoint!, () => {\n            this.onChange({\n              ...query,\n              query: undefined,\n              rawQuery: false,\n              attributes: this.state.attributes,\n              segments: this.state.segments,\n            });\n          });\n        });\n    } else {\n      segments = this.checkAfServer();\n      this.updateArray(segments, this.state.attributes, this.state.summaries, query.isPiPoint!, () => {\n        this.onChange({\n          ...query,\n          query: undefined,\n          rawQuery: false,\n          attributes: this.state.attributes,\n          segments: this.state.segments,\n        });\n      });\n    }\n  }\n\n  /**\n   * Check if the AF server and database are configured in the datasoure config.\n   *\n   * @returns the segments array\n   *\n   * @memberOf PIWebAPIQueryEditor\n   */\n  checkAfServer = () => {\n    const { datasource } = this.props;\n    const segmentsArray = [];\n    if (datasource.afserver?.name) {\n      segmentsArray.push({\n        label: datasource.afserver.name,\n        value: {\n          value: datasource.afserver.name,\n          expandable: true,\n        },\n      });\n      if (datasource.afdatabase?.name) {\n        segmentsArray.push({\n          label: datasource.afdatabase.name,\n          value: {\n            value: datasource.afdatabase.name,\n            expandable: true,\n          },\n        });\n      }\n      segmentsArray.push({\n        label: 'Select Element',\n        value: {\n          value: '-Select Element-',\n        },\n      });\n    } else {\n      segmentsArray.push({\n        label: '',\n      });\n    }\n    return segmentsArray;\n  };\n\n  /**\n   * Update the internal state of the datasource.\n   *\n   * @param segmentsArray the segments array to update\n   * @param attributesArray the AF attributes array to update\n   * @param summariesArray the summaries array to update\n   * @param isPiPoint the is PI point flag\n   * @param cb optional callback function\n   *\n   * @memberOf PIWebAPIQueryEditor\n   */\n  updateArray = (\n    segmentsArray: Array<SelectableValue<PIWebAPISelectableValue>>,\n    attributesArray: Array<SelectableValue<PIWebAPISelectableValue>>,\n    summariesArray: Array<SelectableValue<PIWebAPISelectableValue>>,\n    isPiPoint: boolean,\n    cb?: (() => void) | undefined\n  ) => {\n    this.setState(\n      {\n        segments: segmentsArray,\n        attributes: attributesArray,\n        summaries: summariesArray,\n        isPiPoint,\n      },\n      () => {\n        if (!isPiPoint) {\n          this.checkAttributeSegments(attributesArray, this.state.segments).then(() => {\n            if (cb) {\n              cb();\n            }\n          });\n        }\n      }\n    );\n  };\n\n  // React action when component is initialized/updated\n  scopedVarsDone = false;\n  componentDidMount = () => {\n    this.initialLoad(false);\n  };\n\n  componentDidUpdate = () => {\n    const { query } = this.props;\n    if (this.props.data?.state === 'Done' && !!this.props.data?.request?.scopedVars && !this.scopedVarsDone) {\n      this.scopedVarsDone = true;\n      this.initialLoad(!query.isPiPoint);\n    }\n  };\n\n  initialLoad = (force: boolean) => {\n    const { query } = this.props;\n    const metricsQuery = defaults(query, defaultQuery) as PIWebAPIQuery;\n    const { segments, attributes, summary, isPiPoint } = metricsQuery;\n\n    let segmentsArray: Array<SelectableValue<PIWebAPISelectableValue>> = force ? [] : segments?.slice(0) ?? [];\n    let attributesArray: Array<SelectableValue<PIWebAPISelectableValue>> = force ? [] : attributes?.slice(0) ?? [];\n    let summariesArray = summary?.types ?? [];\n\n    if (!isPiPoint && segmentsArray.length === 0) {\n      if (query.target && query.target.length > 0 && query.target !== ';') {\n        attributesArray = [];\n        // Build query from target\n        this.buildFromTarget(query, segmentsArray, attributesArray)\n          .then((_segmentsArray) => {\n            this.updateArray(_segmentsArray, attributesArray, summariesArray, false);\n          })\n          .catch((e) => console.error(e));\n        return;\n      } else {\n        segmentsArray = this.checkAfServer();\n      }\n    } else if (isPiPoint && segmentsArray.length > 0) {\n      this.piServer = segmentsArray;\n    }\n    this.updateArray(segmentsArray, attributesArray, summariesArray, !!isPiPoint, () => {\n      this.onChange(query);\n    });\n  };\n\n  onChange = (query: PIWebAPIQuery) => {\n    const { onChange, onRunQuery } = this.props;\n\n    if (query.rawQuery) {\n      query.target = query.query ?? '';\n    } else {\n      query.elementPath = this.getSegmentPathUpTo(this.state.segments, this.state.segments.length);\n      query.target =\n        query.elementPath +\n        ';' +\n        join(\n          query.attributes?.map((s) => s.value?.value),\n          ';'\n        );\n    }\n    const summary = query.summary;\n    if (summary) {\n      summary.types = this.state.summaries;\n    }\n\n    onChange({...query, summary});\n\n    if (this.isValidQuery(query)) {\n      onRunQuery();\n    }\n  };\n\n  isValidQuery = (query: PIWebAPIQuery): boolean => {\n    if (query.target && query.target.length > 0 && query.target !== \";\") {\n      query.target = query.target.trim();\n      const targetSplit = query.target.split(\";\", 2);\n      return targetSplit.length === 2 && targetSplit[0].length > 0 && targetSplit[1].length > 0;\n    }\n    return false;\n  }\n\n  stateCallback = () => {\n    const query = this.props.query as PIWebAPIQuery;\n    this.onChange(query);\n  };\n\n  onIsPiPointChange = (event: React.SyntheticEvent<HTMLInputElement>) => {\n    const { query: queryChange } = this.props;\n    const isPiPoint = !queryChange.isPiPoint;\n    this.setState(\n      {\n        segments: isPiPoint ? [{ label: '' }] : this.checkAfServer(),\n        attributes: [],\n        isPiPoint,\n      },\n      () => {\n        this.onChange({\n          ...queryChange,\n          expression: '',\n          attributes: this.state.attributes,\n          segments: this.state.segments,\n          isPiPoint,\n        });\n      }\n    );\n  };\n\n  render() {\n    const { query: queryProps, onChange, onRunQuery } = this.props;\n    const metricsQuery = defaults(queryProps, defaultQuery) as PIWebAPIQuery;\n    const {\n      useLastValue,\n      useUnit,\n      interpolate,\n      query,\n      rawQuery,\n      digitalStates,\n      enableStreaming,\n      recordedValues,\n      expression,\n      isPiPoint,\n      summary,\n      display,\n      regex,\n    } = metricsQuery;\n\n    return (\n      <>\n        {this.props.datasource.piPointConfig && (\n          <InlineField label=\"Is Pi Point?\" labelWidth={LABEL_WIDTH}>\n            <InlineSwitch value={isPiPoint} onChange={this.onIsPiPointChange} />\n          </InlineField>\n        )}\n\n        {!!rawQuery && (\n          <InlineFieldRow>\n            <InlineField label=\"Raw Query\" labelWidth={LABEL_WIDTH} grow={true}>\n              <Input\n                onBlur={this.stateCallback}\n                value={query}\n                onChange={(event: ChangeEvent<HTMLInputElement>) =>\n                  onChange({ ...metricsQuery, query: event.target.value })\n                }\n                placeholder=\"enter query\"\n              />\n            </InlineField>\n            <QueryEditorModeSwitcher isRaw={true} onChange={(value: boolean) => this.textEditorChanged()} />\n          </InlineFieldRow>\n        )}\n\n        {!rawQuery && (\n          <>\n            <div className=\"gf-form-inline\">\n              <QueryRawInlineField\n                label={isPiPoint ? 'PI Server' : 'AF Elements'}\n                tooltip={isPiPoint ? 'Select PI server.' : 'Select AF Element.'}\n              >\n                {this.state.segments.map((segment: SelectableValue<PIWebAPISelectableValue>, index: number) => {\n                  return (\n                    <SegmentAsync\n                      key={'element-' + index}\n                      Component={<CustomLabelComponent value={segment.value} label={segment.label} />}\n                      onChange={(item) => this.onSegmentChange(item, index)}\n                      loadOptions={(query?: string | undefined) => {\n                        return this.getElementSegments(index);\n                      }}\n                      allowCustomValue\n                      inputMinWidth={MIN_ELEM_INPUT_WIDTH}\n                    />\n                  );\n                })}\n                <QueryRowTerminator />\n                {!isPiPoint && (\n                  <QueryEditorModeSwitcher\n                    isRaw={false}\n                    onChange={(value: boolean) => {\n                      onChange({ ...metricsQuery, query: metricsQuery.target, rawQuery: value });\n                    }}\n                  />\n                )}\n              </QueryRawInlineField>\n            </div>\n\n            <QueryInlineField label={isPiPoint ? 'Pi Points' : 'Attributes'}>\n              {this.state.attributes.map((attribute: SelectableValue<PIWebAPISelectableValue>, index: number) => {\n                if (isPiPoint) {\n                  return (\n                    <SegmentAsync\n                      key={'attributes-' + index}\n                      Component={<CustomLabelComponent value={attribute.value} label={attribute.label} />}\n                      disabled={this.piServer.length === 0}\n                      onChange={(item) => this.onPiPointChange(item, index)}\n                      loadOptions={this.getAttributeSegmentsPI}\n                      reloadOptionsOnChange\n                      allowCustomValue\n                      inputMinWidth={MIN_ATTR_INPUT_WIDTH}\n                    />\n                  );\n                }\n                return (\n                  <Segment\n                    key={'attributes-' + index}\n                    Component={<CustomLabelComponent value={attribute.value} label={attribute.label} />}\n                    disabled={this.state.segments.length <= 2}\n                    onChange={(item) => this.onAttributeChange(item, index)}\n                    options={this.getAttributeSegmentsAF()}\n                    allowCustomValue\n                    inputMinWidth={MIN_ATTR_INPUT_WIDTH}\n                  />\n                );\n              })}\n\n              {isPiPoint && (\n                <SegmentAsync\n                  Component={\n                    <CustomLabelComponent\n                      value={this.state.attributeSegment.value}\n                      label={this.state.attributeSegment.label}\n                    />\n                  }\n                  disabled={this.piServer.length === 0}\n                  onChange={this.onAttributeAction}\n                  loadOptions={this.getAttributeSegmentsPI}\n                  reloadOptionsOnChange\n                  allowCustomValue\n                  inputMinWidth={MIN_ATTR_INPUT_WIDTH}\n                />\n              )}\n              {!isPiPoint && (\n                <Segment\n                  Component={\n                    <CustomLabelComponent\n                      value={this.state.attributeSegment.value}\n                      label={this.state.attributeSegment.label}\n                    />\n                  }\n                  disabled={this.state.segments.length <= 2}\n                  onChange={this.onAttributeAction}\n                  options={this.getAttributeSegmentsAF()}\n                  allowCustomValue\n                  inputMinWidth={MIN_ATTR_INPUT_WIDTH}\n                />\n              )}\n            </QueryInlineField>\n          </>\n        )}\n\n        <InlineFieldRow>\n          <InlineField\n            label=\"Calculation\"\n            grow={true}\n            labelWidth={LABEL_WIDTH}\n            tooltip={\n              \"Modify all attributes by an equation. Use '.' for current item. Leave Attributes empty if you wish to perform element based calculations.\"\n            }\n          >\n            <Input\n              onBlur={onRunQuery}\n              value={expression}\n              onChange={(event: ChangeEvent<HTMLInputElement>) =>\n                onChange({ ...metricsQuery, expression: event.target.value })\n              }\n              placeholder=\"'.'*2\"\n            />\n          </InlineField>\n        </InlineFieldRow>\n\n        <InlineFieldRow>\n          <InlineField\n            label=\"Use Last Value\"\n            tooltip={\"Fetch only last value from time range\"}\n            labelWidth={LABEL_WIDTH}\n          >\n            <InlineSwitch\n              value={useLastValue.enable}\n              onChange={() =>\n                this.onChange({\n                  ...metricsQuery,\n                  useLastValue: { ...useLastValue, enable: !useLastValue.enable },\n                })\n              }\n            />\n          </InlineField>\n          <InlineField label=\"Digital States\" labelWidth={LABEL_WIDTH}>\n            <InlineSwitch\n              value={digitalStates.enable}\n              onChange={() =>\n                this.onChange({\n                  ...metricsQuery,\n                  digitalStates: { ...digitalStates, enable: !digitalStates.enable },\n                })\n              }\n            />\n          </InlineField>\n          <InlineField\n            label=\"Replace Bad Data\"\n            labelWidth={LABEL_WIDTH}\n            tooltip={'Replacement for bad quality values.'}\n          >\n            <Segment\n              Component={<CustomLabelComponent value={{ value: summary?.nodata }} label={summary?.nodata} />}\n              onChange={this.calcNoDataValueChanged}\n              options={this.getNoDataSegments()}\n              allowCustomValue\n            />\n          </InlineField>\n          {this.props.datasource.useUnitConfig && (\n            <InlineField\n              label=\"Use unit from datapoints\"\n              tooltip={\"Use unit in label from PI tag or PI AF attribute\"}\n              labelWidth={LABEL_WIDTH}\n            >\n              <InlineSwitch\n                value={useUnit.enable}\n                onChange={() =>\n                  this.onChange({\n                    ...metricsQuery,\n                    useUnit: { ...useUnit, enable: !useUnit.enable },\n                  })\n                }\n              />\n            </InlineField>\n          )}\n          {this.props.datasource.useStreaming && (\n            <InlineField \n              label=\"Enable Streaming\" \n              labelWidth={LABEL_WIDTH}\n              tooltip={'Enable streaming data if it is supported for the point type.'}\n            >\n              <InlineSwitch\n                value={enableStreaming.enable}\n                onChange={() =>\n                  this.onChange({ ...metricsQuery, enableStreaming: { ...enableStreaming, enable: !enableStreaming.enable } })\n                }\n              />\n            </InlineField>\n          )}\n        </InlineFieldRow>\n\n        <InlineFieldRow>\n          {!useLastValue.enable && (\n            <InlineField\n            label=\"Max Recorded Values\"\n            labelWidth={LABEL_WIDTH}\n            tooltip={\n              'Maximum number of recorded value to retrive from the data archive, without using interpolation.'\n            }\n          >\n              <Input\n                onBlur={onRunQuery}\n                value={recordedValues.maxNumber}\n                onChange={(event: ChangeEvent<HTMLInputElement>) =>\n                  onChange({\n                    ...metricsQuery,\n                    recordedValues: { ...recordedValues, maxNumber: parseInt(event.target.value, 10) },\n                  })\n                }\n                type=\"number\"\n                placeholder=\"1000\"\n              />\n            </InlineField>\n          )}\n          <InlineField label=\"Recorded Values\" labelWidth={LABEL_WIDTH}>\n            <InlineSwitch\n              value={recordedValues.enable}\n              onChange={() =>\n                this.onChange({\n                  ...metricsQuery,\n                  recordedValues: { ...recordedValues, enable: !recordedValues.enable },\n                })\n              }\n            />\n          </InlineField>\n        </InlineFieldRow>\n\n        {!useLastValue.enable && (\n          <InlineFieldRow>\n            <InlineField\n              label={!!expression ? \"Interval Period\" : \"Interpolate Period\"}\n              labelWidth={LABEL_WIDTH}\n              tooltip={\"Override time between sampling, e.g. '30s'. Defaults to timespan/chart width.\"}\n            >\n              <Input\n                onBlur={onRunQuery}\n                value={interpolate.interval}\n                onChange={(event: ChangeEvent<HTMLInputElement>) =>\n                  onChange({ ...metricsQuery, interpolate: { ...interpolate, interval: event.target.value } })\n                }\n                placeholder=\"30s\"\n              />\n            </InlineField>\n            <InlineField label={!!expression ? \"Interval Values\" : \"Interpolate\"} labelWidth={LABEL_WIDTH}>\n              <InlineSwitch\n                value={interpolate.enable}\n                onChange={() =>\n                  this.onChange({ ...metricsQuery, interpolate: { ...interpolate, enable: !interpolate.enable } })\n                }\n              />\n            </InlineField>\n          </InlineFieldRow>\n        )}\n\n        {!useLastValue.enable && (\n          <InlineFieldRow>\n            <InlineField\n              label=\"Summary Period\"\n              labelWidth={LABEL_WIDTH}\n              tooltip={\"Define the summary period, e.g. '30s'.\"}\n            >\n              <Input\n                onBlur={onRunQuery}\n                value={summary?.interval}\n                onChange={(event: ChangeEvent<HTMLInputElement>) =>\n                  onChange({ ...metricsQuery, summary: { ...summary, interval: event.target.value } })\n                }\n                placeholder=\"30s\"\n              />\n            </InlineField>\n            <InlineField\n              label=\"Basis\"\n              labelWidth={LABEL_WIDTH}\n              tooltip={\n                'Defines the possible calculation options when performing summary calculations over time-series data.'\n              }\n            >\n              <Segment\n                Component={<CustomLabelComponent value={{ value: summary?.basis }} label={summary?.basis} />}\n                onChange={this.calcBasisValueChanged}\n                options={this.getCalcBasisSegments()}\n                allowCustomValue\n              />\n            </InlineField>\n            <InlineField label=\"Summaries\" labelWidth={LABEL_WIDTH} tooltip={'PI Web API summary options.'}>\n              <InlineFieldRow>\n                {this.state.summaries.map((s: SelectableValue<PIWebAPISelectableValue>, index: number) => {\n                  return (\n                    <Segment\n                      key={'summaries-' + index}\n                      Component={<CustomLabelComponent value={s.value} label={s.label} />}\n                      onChange={(item) => this.onSummaryValueChanged(item, index)}\n                      options={this.getSummarySegments()}\n                      allowCustomValue\n                    />\n                  );\n                })}\n                <Segment\n                  Component={\n                    <CustomLabelComponent\n                      value={this.state.summarySegment.value}\n                      label={this.state.summarySegment.label}\n                    />\n                  }\n                  onChange={this.onSummaryAction}\n                  options={this.getSummarySegments()}\n                  allowCustomValue\n                />\n              </InlineFieldRow>\n            </InlineField>\n          </InlineFieldRow>\n        )}\n\n        <InlineFieldRow>\n          <InlineField\n            label=\"Display Name\"\n            labelWidth={LABEL_WIDTH}\n            tooltip={'If single attribute, modify display name. Otherwise use regex to modify display name.'}\n          >\n            <Input\n              onBlur={onRunQuery}\n              value={display}\n              onChange={(event: ChangeEvent<HTMLInputElement>) =>\n                onChange({ ...metricsQuery, display: event.target.value })\n              }\n              placeholder=\"Display\"\n            />\n          </InlineField>\n          <InlineField label=\"Enable Regex Replace\" labelWidth={LABEL_WIDTH}>\n            <InlineSwitch\n              value={regex.enable}\n              onChange={() => {\n                this.onChange({ ...metricsQuery, regex: { ...regex, enable: !regex.enable } });\n              }}\n            />\n          </InlineField>\n          <InlineField label=\"Search\" labelWidth={LABEL_WIDTH - 8}>\n            <Input\n              onBlur={onRunQuery}\n              value={regex.search}\n              onChange={(event: ChangeEvent<HTMLInputElement>) =>\n                onChange({ ...metricsQuery, regex: { ...regex, search: event.target.value } })\n              }\n              placeholder=\"(.*)\"\n            />\n          </InlineField>\n          <InlineField label=\"Replace\" labelWidth={LABEL_WIDTH - 8}>\n            <Input\n              onBlur={onRunQuery}\n              value={regex.replace}\n              onChange={(event: ChangeEvent<HTMLInputElement>) =>\n                onChange({ ...metricsQuery, regex: { ...regex, replace: event.target.value } })\n              }\n              placeholder=\"$1\"\n            />\n          </InlineField>\n        </InlineFieldRow>\n      </>\n    );\n  }\n}\n","import { each, map } from 'lodash';\r\n\r\nimport {\r\n  AnnotationQuery,\r\n  DataFrame,\r\n  TableData,\r\n  MetricFindValue,\r\n  Field,\r\n  toDataFrame,\r\n} from '@grafana/data';\r\n\r\nimport { PiwebapiElementPath, PiwebapiRsp, PIWebAPIQuery } from 'types';\r\n\r\nexport function parseRawQuery(tr: string): any {\r\n  const splitAttributes = tr.split(';');\r\n  const splitElements = splitAttributes[0].split('\\\\');\r\n\r\n  // remove element hierarchy from attribute collection\r\n  splitAttributes.splice(0, 1);\r\n\r\n  let attributes: any[] = [];\r\n  if (splitElements.length > 1 || (splitElements.length === 1 && splitElements[0] !== '')) {\r\n    const elementPath: string = splitElements.join('\\\\');\r\n    each(splitAttributes, function (item, index) {\r\n      if (item !== '') {\r\n        attributes.push({\r\n          label: item,\r\n          value: {\r\n            value: item,\r\n            expandable: false,\r\n          },\r\n        });\r\n      }\r\n    });\r\n\r\n    return { attributes, elementPath };\r\n  }\r\n\r\n  return { attributes, elementPath: null };\r\n}\r\n\r\nexport function lowerCaseFirstLetter(string: string): string {\r\n  return string.charAt(0).toLocaleLowerCase() + string.slice(1);\r\n}\r\n\r\n/**\r\n * Builds the Grafana metric segment for use on the query user interface.\r\n *\r\n * @param {any} response - response from PI Web API.\r\n * @returns - Grafana metric segment.\r\n *\r\n * @memberOf PiWebApiDatasource\r\n */\r\nexport function metricQueryTransform(response: PiwebapiRsp[]): MetricFindValue[] {\r\n  return map(response, (item) => {\r\n    return {\r\n      text: item.Name,\r\n      expandable:\r\n        item.HasChildren === undefined || item.HasChildren === true || (item.Path ?? '').split('\\\\').length <= 3,\r\n      HasChildren: item.HasChildren,\r\n      Items: item.Items ?? [],\r\n      Path: item.Path,\r\n      WebId: item.WebId,\r\n    } as MetricFindValue;\r\n  });\r\n}\r\n\r\n/**\r\n * Check if all items are selected.\r\n *\r\n * @param {any} current the current variable selection\r\n * @return {boolean} true if all value is selected, false otherwise\r\n */\r\nexport function isAllSelected(current: any): boolean {\r\n  if (!current) {\r\n    return false;\r\n  }\r\n  if (Array.isArray(current.text)) {\r\n    return current.text.indexOf('All') >= 0;\r\n  }\r\n  return current.text === 'All';\r\n}\r\n\r\nexport function processAnnotationQuery(annon: AnnotationQuery<PIWebAPIQuery>,data: DataFrame[]): DataFrame[] {\r\n  let processedFrames: DataFrame[] = [];\r\n  \r\n  data.forEach((d: DataFrame) => {\r\n    d.fields.forEach((f: Field) => {\r\n\r\n      // check if the label has been set, if it hasn't been set then the eventframe annotation is not valid. \r\n      if (!f.labels) { \r\n        return \r\n      }\r\n\r\n      if (!('eventframe' in f.labels)) {\r\n        return;\r\n      }\r\n\r\n      let attribute = 'attribute' in f.labels\r\n\r\n      // Check whether f.values is an array or not to allow for each.\r\n      // Check whether f.values is an array or not to allow for each.\r\n      if (Array.isArray(f.values)) {\r\n        f.values.forEach((value: any) => {\r\n\r\n          if (attribute) {\r\n            let annotation = value['1'].Content\r\n            let valueData:  any[] = []\r\n            for (let i = 2; i in value; i++) {\r\n              valueData.push(value[i].Content.Items)\r\n            }\r\n\r\n            const processedFrame = convertToTableData(annotation.Items!, valueData).map((r) => {\r\n              return toDataFrame(r)});\r\n            processedFrames = processedFrames.concat(processedFrame);\r\n          } else {\r\n            let annotation = value['1'].Content\r\n            const processedFrame = convertToTableData(annotation.Items!).map((r) => {\r\n              return toDataFrame(r)});\r\n            processedFrames = processedFrames.concat(processedFrame);\r\n          }\r\n        });\r\n      } \r\n    });\r\n  });\r\n  return processedFrames;\r\n}\r\n\r\nexport function convertToTableData(items: any[], valueData?: any[]): TableData[] {\r\n  const response: TableData[] = items.map((item: any, index: number) => {\r\n    const columns = [{ text: 'StartTime' }, { text: 'EndTime' }];\r\n    const rows = [item.StartTime, item.EndTime];\r\n    if (valueData) {\r\n      for (let attributeIndex = 0; attributeIndex < valueData.length; attributeIndex++) {\r\n          let attributeData = valueData[attributeIndex]\r\n          let eventframeAributeData = attributeData[index].Content.Items\r\n          eventframeAributeData.forEach((attribute: any) => {\r\n            columns.push({ text: attribute.Name });\r\n            rows.push(String(attribute.Value.Value ? attribute.Value.Value.Name || attribute.Value.Value.Value || attribute.Value.Value : ''));\r\n          });\r\n      }\r\n    }\r\n\r\n    return {\r\n      name: item.Name,\r\n      columns,\r\n      rows: [rows],\r\n    };\r\n  });\r\n  return response;\r\n}\r\n\r\n/**\r\n * Resolve PIWebAPI response 'value' data to value - timestamp pairs.\r\n *\r\n * @param {any} item - 'Item' object from PIWebAPI\r\n * @param {any} noDataReplacementMode - String state of how to replace 'No Data'\r\n * @param {any} grafanaDataPoint - Single Grafana value pair (value, timestamp).\r\n * @returns grafanaDataPoint - Single Grafana value pair (value, timestamp).\r\n * @returns perviousValue - {any} Grafana value (value only).\r\n *\r\n */\r\nexport function noDataReplace(\r\n  item: any,\r\n  noDataReplacementMode: any,\r\n  grafanaDataPoint: any[]\r\n): {\r\n  grafanaDataPoint: any[];\r\n  previousValue: any;\r\n  drop: boolean;\r\n} {\r\n  let previousValue = null;\r\n  let drop = false;\r\n  if (!item.Good || item.Value === 'No Data' || (item.Value?.Name && item.Value?.Name === 'No Data')) {\r\n    if (noDataReplacementMode === 'Drop') {\r\n      drop = true;\r\n    } else if (noDataReplacementMode === '0') {\r\n      grafanaDataPoint[0] = 0;\r\n    } else if (noDataReplacementMode === 'Keep') {\r\n      // Do nothing keep\r\n    } else if (noDataReplacementMode === 'Null') {\r\n      grafanaDataPoint[0] = null;\r\n    } else if (noDataReplacementMode === 'Previous' && previousValue !== null) {\r\n      grafanaDataPoint[0] = previousValue;\r\n    }\r\n  } else {\r\n    previousValue = item.Value;\r\n  }\r\n  return { grafanaDataPoint, previousValue, drop };\r\n}\r\n\r\n/**\r\n * Check if the value is a number.\r\n *\r\n * @param {any} number the value to check\r\n * @returns {boolean} true if the value is a number, false otherwise\r\n */\r\nexport function checkNumber(number: any): boolean {\r\n  return typeof number === 'number' && !Number.isNaN(number) && Number.isFinite(number);\r\n}\r\n\r\n/**\r\n * Returns the last item of the element path.\r\n *\r\n * @param {string} path element path\r\n * @returns {string} last item of the element path\r\n */\r\nexport function getLastPath(path: string): string {\r\n  let splitPath = path.split('|');\r\n  if (splitPath.length === 0) {\r\n    return '';\r\n  }\r\n  splitPath = splitPath[0].split('\\\\');\r\n  return splitPath.length === 0 ? '' : splitPath.pop() ?? '';\r\n}\r\n\r\n/**\r\n * Returns the last item of the element path plus variable.\r\n *\r\n * @param {PiwebapiElementPath[]} elementPathArray array of element paths\r\n * @param {string} path element path\r\n * @returns {string} last item of the element path\r\n */\r\nexport function getPath(elementPathArray: PiwebapiElementPath[], path: string): string {\r\n  if (!path || elementPathArray.length === 0) {\r\n    return '';\r\n  }\r\n  const splitStr = getLastPath(path);\r\n  const foundElement = elementPathArray.find((e) => path.indexOf(e.path) >= 0)?.variable;\r\n  return foundElement ? foundElement + '|' + splitStr : splitStr;\r\n}\r\n\r\n/**\r\n * Replace calculation dot in expression with PI point name.\r\n *\r\n * @param {boolean} replace - is pi point and calculation.\r\n * @param {PiwebapiRsp} webid - Pi web api response object.\r\n * @param {string} url - original url.\r\n * @returns Modified url\r\n */\r\nexport function getFinalUrl(replace: boolean, webid: PiwebapiRsp, url: string) {\r\n  const newUrl = replace ? url.replace(/'\\.'/g, `'${webid.Name}'`) : url;\r\n  return newUrl;\r\n}\r\n","import React, { memo, useState } from 'react';\n\nimport { AnnotationQuery, QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { AsyncSelect, InlineField, InlineFieldRow, InlineSwitch, Input } from '@grafana/ui';\n\nimport { PiWebAPIDatasource } from 'datasource';\nimport { PIWebAPIDataSourceJsonData, PIWebAPIQuery, PiwebapiRsp } from 'types';\n\nconst SMALL_LABEL_WIDTH = 20;\nconst LABEL_WIDTH = 30;\nconst MIN_INPUT_WIDTH = 50;\n\ntype PiWebAPIQueryEditorProps = QueryEditorProps<PiWebAPIDatasource, PIWebAPIQuery, PIWebAPIDataSourceJsonData>;\n\ntype Props = PiWebAPIQueryEditorProps & {\n  annotation?: AnnotationQuery<PIWebAPIQuery>;\n  onAnnotationChange?: (annotation: AnnotationQuery<PIWebAPIQuery>) => void;\n};\n\nexport const PiWebAPIAnnotationsQueryEditor = memo(function PiWebAPIAnnotationQueryEditor(props: Props) {\n  const { query, datasource, annotation, onChange, onRunQuery } = props;\n\n  const [afWebId, setAfWebId] = useState<string>('');\n  const [database, setDatabase] = useState<PiwebapiRsp>(annotation?.target?.database ?? {});\n\n  // this should never happen, but we want to keep typescript happy\n  if (annotation === undefined) {\n    return null;\n  }\n\n  const getEventFrames = (): Promise<Array<SelectableValue<PiwebapiRsp>>> => {\n    return datasource.getEventFrameTemplates(database?.WebId!).then((templ: PiwebapiRsp[]) => {\n      return templ.map((d) => ({ label: d.Name, value: d }));\n    });\n  };\n\n  const getDatabases = (): Promise<Array<SelectableValue<PiwebapiRsp>>> => {\n    return datasource.getDatabases(afWebId).then((dbs: PiwebapiRsp[]) => {\n      return dbs.map((d) => ({ label: d.Name, value: d }));\n    });\n  };\n\n  const getValue = (key: string) => {\n    const query: any = annotation.target as any;\n    if (!query || !query[key]) {\n      return;\n    }\n    return { label: query[key].Name, value: query[key] };\n  };\n\n  datasource.getAssetServer(datasource.afserver.name).then((result) => {\n    setAfWebId(result.WebId!);\n  });\n\n  return (\n    <>\n      <div className=\"gf-form-group\">\n        <InlineFieldRow>\n          <InlineField label=\"Database\" labelWidth={LABEL_WIDTH} grow={true}>\n            <AsyncSelect\n              key={afWebId ?? 'database-key'}\n              loadOptions={getDatabases}\n              loadingMessage={'Loading'}\n              value={getValue('database')}\n              onChange={(e) => {\n                setDatabase(e.value);\n                onChange({ ...query, database: e.value, template: undefined });\n              }}\n              defaultOptions\n            />\n          </InlineField>\n          <InlineField label=\"Event Frames\" labelWidth={LABEL_WIDTH} grow={true}>\n            <AsyncSelect\n              key={database?.WebId ?? 'default-template-key'}\n              loadOptions={getEventFrames}\n              loadingMessage={'Loading'}\n              value={getValue('template')}\n              onChange={(e) => onChange({ ...query, template: e.value })}\n              defaultOptions\n            />\n          </InlineField>\n          <InlineField label=\"Show Start and End Time\" labelWidth={LABEL_WIDTH} grow={true}>\n            <InlineSwitch\n              value={!!query.showEndTime}\n              onChange={(e) => onChange({ ...query, showEndTime: e.currentTarget.checked })}\n            />\n          </InlineField>\n        </InlineFieldRow>\n        <InlineFieldRow>\n          <InlineField label=\"Category name\" labelWidth={LABEL_WIDTH} grow={true}>\n            <Input\n              type=\"text\"\n              value={query.categoryName}\n              onBlur={(e) => onRunQuery()}\n              onChange={(e) => onChange({ ...query, categoryName: e.currentTarget.value })}\n              placeholder=\"Enter category name\"\n            />\n          </InlineField>\n          <InlineField label=\"Name Filter\" labelWidth={LABEL_WIDTH} grow={true}>\n            <Input\n              type=\"text\"\n              value={query.nameFilter}\n              onBlur={(e) => onRunQuery()}\n              onChange={(e) => onChange({ ...query, nameFilter: e.currentTarget.value })}\n              placeholder=\"Enter name filter\"\n            />\n          </InlineField>\n        </InlineFieldRow>\n        <InlineFieldRow>\n          <InlineField label=\"Enable Name Regex Replacement\" labelWidth={LABEL_WIDTH} grow={false}>\n            <InlineSwitch\n              value={query.regex?.enable}\n              onChange={(e) =>\n                onChange({\n                  ...query,\n                  regex: { ...query.regex, enable: e.currentTarget.checked },\n                })\n              }\n            />\n          </InlineField>\n          <InlineField label=\"Name Filter\" labelWidth={SMALL_LABEL_WIDTH} grow={false}>\n            <Input\n              type=\"text\"\n              value={query.regex?.search}\n              onBlur={(e) => onRunQuery()}\n              onChange={(e) =>\n                onChange({\n                  ...query,\n                  regex: { ...query.regex, search: e.currentTarget.value },\n                })\n              }\n              placeholder=\"(.*)\"\n              width={MIN_INPUT_WIDTH}\n            />\n          </InlineField>\n          <InlineField label=\"Replace\" labelWidth={SMALL_LABEL_WIDTH} grow={true}>\n            <Input\n              type=\"text\"\n              value={query?.regex?.replace}\n              onBlur={(e) => onRunQuery()}\n              onChange={(e) =>\n                onChange({\n                  ...query,\n                  regex: { ...query.regex, replace: e.currentTarget.value },\n                })\n              }\n              placeholder=\"$1\"\n            />\n          </InlineField>\n        </InlineFieldRow>\n        <InlineFieldRow>\n          <InlineField label=\"Enable Attribute Usage\" labelWidth={LABEL_WIDTH} grow={false}>\n            <InlineSwitch\n              value={query.attribute?.enable}\n              onChange={(e) =>\n                onChange({\n                  ...query!,\n                  attribute: { ...query.attribute, enable: e.currentTarget.checked },\n                })\n              }\n            />\n          </InlineField>\n          <InlineField label=\"Attribute Name\" labelWidth={LABEL_WIDTH} grow={true}>\n            <Input\n              type=\"text\"\n              value={query.attribute?.name}\n              onBlur={(e) => onRunQuery()}\n              onChange={(e) =>\n                onChange({\n                  ...query!,\n                  attribute: { ...query.attribute, name: e.currentTarget.value },\n                })\n              }\n              placeholder=\"Enter name\"\n            />\n          </InlineField>\n        </InlineFieldRow>\n      </div>\n    </>\n  );\n});\n","import { filter, map } from 'lodash';\n\nimport { Observable, of, firstValueFrom } from 'rxjs';\n\nimport {\n  DataSourceInstanceSettings,\n  MetricFindValue,\n  AnnotationQuery,\n  ScopedVars,\n  AnnotationEvent,\n  DataFrame,\n  DataQueryRequest,\n  DataQueryResponse,\n} from '@grafana/data';\nimport { BackendSrv, getBackendSrv, getTemplateSrv, TemplateSrv, DataSourceWithBackend } from '@grafana/runtime';\n\nimport { PIWebAPIQuery, PIWebAPIDataSourceJsonData, PiDataServer, PiwebapiInternalRsp, PiwebapiRsp } from './types';\nimport { metricQueryTransform, parseRawQuery } from 'helper';\n\nimport { PiWebAPIAnnotationsQueryEditor } from 'query/AnnotationsQueryEditor';\n\nexport class PiWebAPIDatasource extends DataSourceWithBackend<PIWebAPIQuery, PIWebAPIDataSourceJsonData> {\n  piserver: PiDataServer;\n  afserver: PiDataServer;\n  afdatabase: PiDataServer;\n  piPointConfig: boolean;\n  newFormatConfig: boolean;\n  useUnitConfig: boolean;\n  useExperimental: boolean;\n  useStreaming: boolean;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<PIWebAPIDataSourceJsonData>,\n    readonly templateSrv: TemplateSrv = getTemplateSrv(),\n    private readonly backendSrv: BackendSrv = getBackendSrv()\n  ) {\n    super(instanceSettings);\n\n    this.piserver = { name: (instanceSettings.jsonData || {}).piserver, webid: undefined };\n    this.afserver = { name: (instanceSettings.jsonData || {}).afserver, webid: undefined };\n    this.afdatabase = { name: (instanceSettings.jsonData || {}).afdatabase, webid: undefined };\n    this.piPointConfig = instanceSettings.jsonData.pipoint || false;\n    this.newFormatConfig = instanceSettings.jsonData.newFormat || false;\n    this.useUnitConfig = instanceSettings.jsonData.useUnit || false;\n    this.useExperimental = instanceSettings.jsonData.useExperimental || false;\n    this.useStreaming = instanceSettings.jsonData.useStreaming || false;\n\n    this.annotations = {\n      QueryEditor: PiWebAPIAnnotationsQueryEditor,\n      prepareQuery(anno: AnnotationQuery<PIWebAPIQuery>): PIWebAPIQuery | undefined {\n        if (anno.target) {\n          anno.target.queryType = 'Annotation';\n          anno.target.isAnnotation = true;\n        }\n        return anno.target;\n      },\n      processEvents: (\n        anno: AnnotationQuery<PIWebAPIQuery>,\n        data: DataFrame[]\n      ): Observable<AnnotationEvent[] | undefined> => {\n        return of(this.eventFrameToAnnotation(anno, data));\n      },\n    };\n\n    Promise.all([\n      this.getDataServer(this.piserver.name).then((result: PiwebapiRsp) => (this.piserver.webid = result.WebId)),\n      this.getAssetServer(this.afserver.name).then((result: PiwebapiRsp) => (this.afserver.webid = result.WebId)),\n      this.getDatabase(\n        this.afserver.name && this.afdatabase.name ? this.afserver.name + '\\\\' + this.afdatabase.name : undefined\n      ).then((result: PiwebapiRsp) => (this.afdatabase.webid = result.WebId)),\n    ]);\n  }\n\n  /**\n   * This method overrides the applyTemplateVariables() method from the DataSourceWithBackend class.\n   * It is responsible for replacing the template variables in the query configuration prior\n   * to sending the query to the backend. Templated variables are not able to be used for alerts\n   * or public facing dashboards.\n   *\n   * @param {PIWebAPIQuery} query - The raw query configuration from the frontend as defined in the query editor.\n   * @param {ScopedVars} scopedVars - The template variables that are defined in the query editor and dashboard.\n   * @returns - PIWebAPIQuery.\n   *\n   * @memberOf PiWebApiDatasource\n   */\n  applyTemplateVariables(query: PIWebAPIQuery, scopedVars: ScopedVars) {\n    return {\n      ...query,\n      target: query.target ? this.templateSrv.replace(query.target, scopedVars) : '',\n    };\n  }\n\n  /**\n   * This method makes the query to the backend.\n   * \n   * @param {DataQueryRequest<PIWebAPIQuery>}  options\n   *\n   * @memberOf PiWebApiDatasource\n   */\n  query(options: DataQueryRequest<PIWebAPIQuery>): Observable<DataQueryResponse> {\n    console.log('OSISOFT QUERY');\n  \n    if (options.targets.length === 1 && !!options.targets[0].isAnnotation) {\n      return super.query(options);\n    }\n\n    const query = this.buildQueryParameters(options);\n    if (query.targets.length <= 0) {\n      return of({ data: [] });\n    }\n\n    console.log('OSISOFT QUERY', query);\n\n    return super.query(query);\n  }\n\n  /**\n   * This method does the discovery of the AF Hierarchy and populates the query user interface segments.\n   *\n   * @param {any} query - Parses the query configuration and builds a PI Web API query.\n   * @returns - Segment information.\n   *\n   * @memberOf PiWebApiDatasource\n   */\n  metricFindQuery(query: any, queryOptions: any): Promise<MetricFindValue[]> {\n    const ds = this;\n    const querydepth = ['servers', 'databases', 'databaseElements', 'elements'];\n    if (typeof query === 'string') {\n      query = JSON.parse(query as string);\n    }\n    if (queryOptions.isPiPoint) {\n      query.path = this.templateSrv.replace(query.path, queryOptions);\n    } else {\n      if (query.path === '') {\n        query.type = querydepth[0];\n      } else {\n        query.path = this.templateSrv.replace(query.path, queryOptions); // replace variables in the path\n        query.path = query.path.split(';')[0]; // if the attribute is in the path, let's remote it\n        if (query.type !== 'attributes') {\n          query.type = querydepth[Math.max(0, Math.min(query.path.split('\\\\').length, querydepth.length - 1))];\n        }\n      }\n      query.path = query.path.replace(/\\{([^\\\\])*\\}/gi, (r: string) => r.substring(1, r.length - 2).split(',')[0]);\n    }\n\n    query.filter = query.filter ?? '*';\n\n    if (query.type === 'servers') {\n      return ds.afserver?.name\n        ? ds\n            .getAssetServer(ds.afserver.name)\n            .then((result: PiwebapiRsp) => [result])\n            .then(metricQueryTransform)\n        : ds.getAssetServers().then(metricQueryTransform);\n    } else if (query.type === 'databases' && !!query.afServerWebId) {\n      return ds.getDatabases(query.afServerWebId, {}).then(metricQueryTransform);\n    } else if (query.type === 'databases') {\n      return ds\n        .getAssetServer(query.path)\n        .then((server) => ds.getDatabases(server.WebId ?? '', {}))\n        .then(metricQueryTransform);\n    } else if (query.type === 'databaseElements') {\n      return ds\n        .getDatabase(query.path)\n        .then((db) =>\n          ds.getDatabaseElements(db.WebId ?? '', {\n            selectedFields: 'Items.WebId%3BItems.Name%3BItems.Items%3BItems.Path%3BItems.HasChildren',\n          })\n        )\n        .then(metricQueryTransform);\n    } else if (query.type === 'elements') {\n      return ds\n        .getElement(query.path)\n        .then((element) =>\n          ds.getElements(element.WebId ?? '', {\n            selectedFields:\n              'Items.Description%3BItems.WebId%3BItems.Name%3BItems.Items%3BItems.Path%3BItems.HasChildren',\n            nameFilter: query.filter,\n          })\n        )\n        .then(metricQueryTransform);\n    } else if (query.type === 'attributes') {\n      return ds\n        .getElement(query.path)\n        .then((element) =>\n          ds.getAttributes(element.WebId ?? '', {\n            searchFullHierarchy: 'true',\n            selectedFields:\n              'Items.Type%3BItems.DefaultUnitsName%3BItems.Description%3BItems.WebId%3BItems.Name%3BItems.Path',\n            nameFilter: query.filter,\n          })\n        )\n        .then(metricQueryTransform);\n    } else if (query.type === 'dataserver') {\n      return ds.getDataServers().then(metricQueryTransform);\n    } else if (query.type === 'pipoint') {\n      return ds.piPointSearch(query.webId, query.pointName).then(metricQueryTransform);\n    }\n    return Promise.reject('Bad type');\n  }\n\n  /** PRIVATE SECTION */\n\n  /**\n   * Builds the PIWebAPI query parameters.\n   *\n   * @param {any} options - Grafana query and panel options.\n   * @returns - PIWebAPI query parameters.\n   *\n   * @memberOf PiWebApiDatasource\n   */\n  private buildQueryParameters(options: DataQueryRequest<PIWebAPIQuery>) {\n    options.targets = filter(options.targets, (target) => {\n      if (!target  || !target.target || target.attributes?.length === 0 || target.target === ';' || !!target.hide) {\n        return false;\n      }\n      return !target.target.startsWith('Select AF');\n    });\n\n    if (options.maxDataPoints) {\n      options.maxDataPoints = options.maxDataPoints > 30000 ? 30000 : options.maxDataPoints;\n    }\n    options.targets = map(options.targets, (target) => {\n      if (!!target.rawQuery && !!target.target) {\n        const { attributes, elementPath } = parseRawQuery(this.templateSrv.replace(target.target, options.scopedVars));\n        target.attributes = attributes;\n        target.elementPath = elementPath;\n      }\n      const tar = {\n        enableStreaming: target.enableStreaming,\n        target: this.templateSrv.replace(target.target, options.scopedVars),\n        elementPath: this.templateSrv.replace(target.elementPath, options.scopedVars),\n        attributes: map(target.attributes, (att) => {\n          if (att.value) {\n            this.templateSrv.replace(att.value.value, options.scopedVars)\n          }\n          return att;\n        }),\n        segments: map(target.segments, (att) => {\n          if (att.value) {\n            this.templateSrv.replace(att.value.value, options.scopedVars)\n          }\n          return att;\n        }),\n        isAnnotation: !!target.isAnnotation,\n        display: !!target.display ? this.templateSrv.replace(target.display, options.scopedVars) : undefined,\n        refId: target.refId,\n        hide: target.hide,\n        interpolate: target.interpolate || { enable: false },\n        useLastValue: target.useLastValue || { enable: false },\n        useUnit: target.useUnit || { enable: false },\n        recordedValues: target.recordedValues || { enable: false },\n        digitalStates: target.digitalStates || { enable: false },\n        webid: target.webid ?? '',\n        regex: target.regex || { enable: false },\n        expression: target.expression || '',\n        summary: target.summary || { types: [] },\n        startTime: options.range.from,\n        endTime: options.range.to,\n        isPiPoint: !!target.isPiPoint,\n        scopedVars: options.scopedVars,\n      };\n\n      if (tar.expression) {\n        tar.expression = this.templateSrv.replace(tar.expression, options.scopedVars);\n      }\n\n      if (tar.summary.types !== undefined) {\n        tar.summary.types = filter(tar.summary.types, (item) => {\n          return item !== undefined && item !== null && item !== '';\n        });\n      }\n    \n      return tar;\n    });\n\n    return options;\n  }\n\n  /**\n   * Localize the eventFrame dataFrame records to Grafana Annotations.\n   * @param {any} annon - The annotation object.\n   * @param {any} data - The dataframe recrords.\n   * @returns - Grafana Annotation\n   *\n   * @memberOf PiWebApiDatasource\n   */\n  private eventFrameToAnnotation(annon: AnnotationQuery<PIWebAPIQuery>, data: DataFrame[]): AnnotationEvent[] {\n    const annotationOptions = annon.target!;\n    const events: AnnotationEvent[] = [];\n    const currentLocale = Intl.DateTimeFormat().resolvedOptions().locale;\n\n    data.forEach((d: DataFrame) => {\n      let values = this.transformDataFrameToMap(d);\n      for (let i = 0; i < values['time'].length; i++) {\n        // replace Dataframe name using Regex\n        let title = values['title'][i];\n        if (annotationOptions.regex && annotationOptions.regex.enable) {\n          title = title.replace(new RegExp(annotationOptions.regex.search), annotationOptions.regex.replace);\n        }\n\n        // test if timeEnd is negative and if so, set it to null\n        if (values['timeEnd'][i] < 0) {\n          values['timeEnd'][i] = null;\n        }\n\n        // format the text and localize the dates to browser locale\n        let text = 'Tag: ' + title;\n        if (annotationOptions.attribute && annotationOptions.attribute.enable) {\n          text += values['attributeText'][i];\n        }\n        text += '<br />Start: ' + new Date(values['time'][i]).toLocaleString(currentLocale) + '<br />End: ';\n\n        if (values['timeEnd'][i]) {\n          text += new Date(values['timeEnd'][i]).toLocaleString(currentLocale);\n        } else {\n          text += 'Eventframe is open';\n        }\n\n        const event: AnnotationEvent = {\n          time: values['time'][i],\n          timeEnd: !!annotationOptions.showEndTime ? values['timeEnd'][i] : undefined,\n          title: title,\n          id: values['id'][i],\n          text: text,\n          tags: ['OSISoft PI'],\n        };\n\n        events.push(event);\n      }\n    });\n    return events;\n  }\n\n  /**\n   *\n   */\n  private transformDataFrameToMap(dataFrame: DataFrame): Record<string, any[]> {\n    const map: Record<string, any[]> = {};\n\n    dataFrame.fields.forEach((field) => {\n      map[field.name] = field.values.toArray();\n    });\n\n    return map;\n  }\n\n  /**\n   * Abstraction for calling the PI Web API REST endpoint\n   *\n   * @param {any} path - the path to append to the base server URL.\n   * @returns - The full URL.\n   *\n   * @memberOf PiWebApiDatasource\n   */\n  private restGet(path: string): Promise<PiwebapiInternalRsp> {\n    const observable = this.backendSrv.fetch({\n      url: `/api/datasources/${this.id}/resources${path}`,\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    return firstValueFrom(observable).then((response: any) => {\n      return response as PiwebapiInternalRsp;\n    });\n  }\n\n  // Get a list of all data (PI) servers\n  private getDataServers(): Promise<PiwebapiRsp[]> {\n    return this.restGet('/dataservers').then((response) => response.data.Items ?? []);\n  }\n  private getDataServer(name: string | undefined): Promise<PiwebapiRsp> {\n    if (!name) {\n      return Promise.resolve({});\n    }\n    return this.restGet('/dataservers?name=' + name).then((response) => response.data);\n  }\n  // Get a list of all asset (AF) servers\n  private getAssetServers(): Promise<PiwebapiRsp[]> {\n    return this.restGet('/assetservers').then((response) => response.data.Items ?? []);\n  }\n  getAssetServer(name: string | undefined): Promise<PiwebapiRsp> {\n    if (!name) {\n      return Promise.resolve({});\n    }\n    return this.restGet('/assetservers?path=\\\\\\\\' + name).then((response) => response.data);\n  }\n  getDatabase(path: string | undefined): Promise<PiwebapiRsp> {\n    if (!path) {\n      return Promise.resolve({});\n    }\n    return this.restGet('/assetdatabases?path=\\\\\\\\' + path).then((response) => response.data);\n  }\n  getDatabases(serverId: string, options?: any): Promise<PiwebapiRsp[]> {\n    if (!serverId) {\n      return Promise.resolve([]);\n    }\n    return this.restGet('/assetservers/' + serverId + '/assetdatabases').then((response) => response.data.Items ?? []);\n  }\n  getElement(path: string): Promise<PiwebapiRsp> {\n    if (!path) {\n      return Promise.resolve({});\n    }\n    return this.restGet('/elements?path=\\\\\\\\' + path).then((response) => response.data);\n  }\n  getEventFrameTemplates(databaseId: string): Promise<PiwebapiRsp[]> {\n    if (!databaseId) {\n      return Promise.resolve([]);\n    }\n    return this.restGet(\n      '/assetdatabases/' + databaseId + '/elementtemplates?selectedFields=Items.InstanceType%3BItems.Name%3BItems.WebId'\n    ).then((response) => {\n      return filter(response.data.Items ?? [], (item) => item.InstanceType === 'EventFrame');\n    });\n  }\n  getElementTemplates(databaseId: string): Promise<PiwebapiRsp[]> {\n    if (!databaseId) {\n      return Promise.resolve([]);\n    }\n    return this.restGet(\n      '/assetdatabases/' + databaseId + '/elementtemplates?selectedFields=Items.InstanceType%3BItems.Name%3BItems.WebId'\n    ).then((response) => {\n      return filter(response.data.Items ?? [], (item) => item.InstanceType === 'Element');\n    });\n  }\n\n  /**\n   * @description\n   * Get the child attributes of the current resource.\n   * GET attributes/{webId}/attributes\n   * @param {string} elementId - The ID of the parent resource. See WebID for more information.\n   * @param {Object} options - Query Options\n   * @param {string} options.nameFilter - The name query string used for finding attributes. The default is no filter. See Query String for more information.\n   * @param {string} options.categoryName - Specify that returned attributes must have this category. The default is no category filter.\n   * @param {string} options.templateName - Specify that returned attributes must be members of this template. The default is no template filter.\n   * @param {string} options.valueType - Specify that returned attributes' value type must be the given value type. The default is no value type filter.\n   * @param {string} options.searchFullHierarchy - Specifies if the search should include attributes nested further than the immediate attributes of the searchRoot. The default is 'false'.\n   * @param {string} options.sortField - The field or property of the object used to sort the returned collection. The default is 'Name'.\n   * @param {string} options.sortOrder - The order that the returned collection is sorted. The default is 'Ascending'.\n   * @param {string} options.startIndex - The starting index (zero based) of the items to be returned. The default is 0.\n   * @param {string} options.showExcluded - Specified if the search should include attributes with the Excluded property set. The default is 'false'.\n   * @param {string} options.showHidden - Specified if the search should include attributes with the Hidden property set. The default is 'false'.\n   * @param {string} options.maxCount - The maximum number of objects to be returned per call (page size). The default is 1000.\n   * @param {string} options.selectedFields - List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. See Selected Fields for more information.\n   */\n  private getAttributes(elementId: string, options: any): Promise<PiwebapiRsp[]> {\n    let querystring =\n      '?' +\n      map(options, (value, key) => {\n        return key + '=' + value;\n      }).join('&');\n\n    if (querystring === '?') {\n      querystring = '';\n    }\n\n    return this.restGet('/elements/' + elementId + '/attributes' + querystring).then(\n      (response) => response.data.Items ?? []\n    );\n  }\n\n  /**\n   * @description\n   * Retrieve elements based on the specified conditions. By default, this method selects immediate children of the current resource.\n   * Users can search for the elements based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the elements that match the default search.\n   * GET assetdatabases/{webId}/elements\n   * @param {string} databaseId - The ID of the parent resource. See WebID for more information.\n   * @param {Object} options - Query Options\n   * @param {string} options.webId - The ID of the resource to use as the root of the search. See WebID for more information.\n   * @param {string} options.nameFilter - The name query string used for finding objects. The default is no filter. See Query String for more information.\n   * @param {string} options.categoryName - Specify that returned elements must have this category. The default is no category filter.\n   * @param {string} options.templateName - Specify that returned elements must have this template or a template derived from this template. The default is no template filter.\n   * @param {string} options.elementType - Specify that returned elements must have this type. The default type is 'Any'. See Element Type for more information.\n   * @param {string} options.searchFullHierarchy - Specifies if the search should include objects nested further than the immediate children of the searchRoot. The default is 'false'.\n   * @param {string} options.sortField - The field or property of the object used to sort the returned collection. The default is 'Name'.\n   * @param {string} options.sortOrder - The order that the returned collection is sorted. The default is 'Ascending'.\n   * @param {number} options.startIndex - The starting index (zero based) of the items to be returned. The default is 0.\n   * @param {number} options.maxCount - The maximum number of objects to be returned per call (page size). The default is 1000.\n   * @param {string} options.selectedFields -  List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. See Selected Fields for more information.\n   */\n  private getDatabaseElements(databaseId: string, options: any): Promise<PiwebapiRsp[]> {\n    let querystring =\n      '?' +\n      map(options, (value, key) => {\n        return key + '=' + value;\n      }).join('&');\n\n    if (querystring === '?') {\n      querystring = '';\n    }\n\n    return this.restGet('/assetdatabases/' + databaseId + '/elements' + querystring).then(\n      (response) => response.data.Items ?? []\n    );\n  }\n\n  /**\n   * @description\n   * Retrieve elements based on the specified conditions. By default, this method selects immediate children of the current resource.\n   * Users can search for the elements based on specific search parameters. If no parameters are specified in the search, the default values for each parameter will be used and will return the elements that match the default search.\n   * GET elements/{webId}/elements\n   * @param {string} databaseId - The ID of the resource to use as the root of the search. See WebID for more information.\n   * @param {Object} options - Query Options\n   * @param {string} options.webId - The ID of the resource to use as the root of the search. See WebID for more information.\n   * @param {string} options.nameFilter - The name query string used for finding objects. The default is no filter. See Query String for more information.\n   * @param {string} options.categoryName - Specify that returned elements must have this category. The default is no category filter.\n   * @param {string} options.templateName - Specify that returned elements must have this template or a template derived from this template. The default is no template filter.\n   * @param {string} options.elementType - Specify that returned elements must have this type. The default type is 'Any'. See Element Type for more information.\n   * @param {string} options.searchFullHierarchy - Specifies if the search should include objects nested further than the immediate children of the searchRoot. The default is 'false'.\n   * @param {string} options.sortField - The field or property of the object used to sort the returned collection. The default is 'Name'.\n   * @param {string} options.sortOrder - The order that the returned collection is sorted. The default is 'Ascending'.\n   * @param {number} options.startIndex - The starting index (zero based) of the items to be returned. The default is 0.\n   * @param {number} options.maxCount - The maximum number of objects to be returned per call (page size). The default is 1000.\n   * @param {string} options.selectedFields -  List of fields to be returned in the response, separated by semicolons (;). If this parameter is not specified, all available fields will be returned. See Selected Fields for more information.\n   */\n  private getElements(elementId: string, options: any): Promise<PiwebapiRsp[]> {\n    let querystring =\n      '?' +\n      map(options, (value, key) => {\n        return key + '=' + value;\n      }).join('&');\n\n    if (querystring === '?') {\n      querystring = '';\n    }\n\n    return this.restGet('/elements/' + elementId + '/elements' + querystring).then(\n      (response) => response.data.Items ?? []\n    );\n  }\n\n  /**\n   * Retrieve a list of points on a specified Data Server.\n   *\n   * @param {string} serverId - The ID of the server. See WebID for more information.\n   * @param {string} nameFilter - A query string for filtering by point name. The default is no filter. *, ?, [ab], [!ab]\n   */\n  private piPointSearch(serverId: string, nameFilter: string): Promise<PiwebapiRsp[]> {\n    let filter1 = this.templateSrv.replace(nameFilter);\n    let filter2 = `${filter1}`;\n    let doFilter = false;\n    if (filter1 !== nameFilter) {\n      const regex = /\\{(\\w|,)+\\}/gs;\n      let m;\n      while ((m = regex.exec(filter1)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        // The result can be accessed through the `m`-variable.\n        m.forEach((match, groupIndex) => {\n          if (groupIndex === 0) {\n            filter1 = filter1.replace(match, match.replace('{', '(').replace('}', ')').replace(',', '|'));\n            filter2 = filter2.replace(match, '*');\n            doFilter = true;\n          }\n        });\n      }\n    }\n    return this.restGet('/dataservers/' + serverId + '/points?maxCount=50&nameFilter=' + filter2).then((results) => {\n      if (!!results && !!results.data?.Items) {\n        return doFilter ? results.data.Items.filter((item) => item.Name?.match(filter1)) : results.data.Items;\n      }\n      return [];\n    });\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport { PIWebAPIConfigEditor } from './config/ConfigEditor';\nimport { PIWebAPIQueryEditor } from './query/QueryEditor';\nimport { PiWebAPIDatasource } from './datasource';\nimport { PIWebAPIQuery, PIWebAPIDataSourceJsonData } from './types';\n\nexport const plugin = new DataSourcePlugin<PiWebAPIDatasource, PIWebAPIQuery, PIWebAPIDataSourceJsonData>(\n  PiWebAPIDatasource\n)\n  .setQueryEditor(PIWebAPIQueryEditor)\n  .setConfigEditor(PIWebAPIConfigEditor);\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__781__","__WEBPACK_EXTERNAL_MODULE__531__","__WEBPACK_EXTERNAL_MODULE__7__","__WEBPACK_EXTERNAL_MODULE__241__","__WEBPACK_EXTERNAL_MODULE__959__","__WEBPACK_EXTERNAL_MODULE__269__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","FormField","LegacyForms","coerceOptions","options","jsonData","url","PIWebAPIConfigEditor","PureComponent","render","originalOptions","this","props","div","DataSourceHttpSettings","defaultUrl","dataSourceConfig","onChange","onHttpOptionsChange","showAccessOptions","h3","className","InlineField","label","labelWidth","InlineSwitch","pipoint","onPiPointChange","newFormat","onNewFormatChange","useUnit","onUseUnitChange","useExperimental","onUseExperimentalChange","useStreaming","onUseStreamingChange","inputWidth","onPIServerChange","piserver","placeholder","onAFServerChange","afserver","onAFDatabaseChange","afdatabase","event","onOptionsChange","target","checked","QueryField","tooltip","children","InlineFormLabel","width","QueryRowTerminator","QueryInlineField","QueryEditorRow","QueryRawInlineField","QueryRawEditorRow","defaultQuery","attributes","segments","regex","enable","summary","types","basis","interval","nodata","expression","interpolate","useLastValue","recordedValues","digitalStates","enableStreaming","isPiPoint","QueryEditorModeSwitcher","isRaw","isModalOpen","setModalOpen","useState","useEffect","Button","aria-label","icon","variant","type","onClick","ConfirmModal","isOpen","title","body","confirmText","dismissText","onConfirm","onDismiss","LABEL_WIDTH","MIN_ATTR_INPUT_WIDTH","REMOVE_LABEL","CustomLabelComponent","Icon","name","PIWebAPIQueryEditor","isValueEmpty","length","calcBasisValueChanged","segment","metricsQuery","query","getCalcBasisSegments","map","calculationBasis","item","expandable","calcNoDataValueChanged","getNoDataSegments","noDataReplacement","onSummaryValueChanged","index","summaries","state","slice","splice","setState","stateCallback","getSummarySegments","summaryTypes","filter","s","indexOf","unshift","removeSummary","part","onSummaryAction","selectableValue","push","summarySegment","removeAttribute","attributeChangeValue","onAttributeAction","getSegmentPathUpTo","arr","reduce","result","startsWith","checkAttributeSegments","data","datasource","ctrl","findQuery","path","metricFindQuery","assign","request","scopedVars","then","attributesResponse","validAttributes","each","attribute","Path","substring","WebId","filteredAttributes","attrib","changedValue","templateSrv","replace","availableAttributes","catch","err","error","message","checkPiPointSegments","webId","getSelectedPIServer","pointName","webID","piServer","forEach","parts","split","text","textEditorChanged","splitAttributes","splitElements","_","match","getElementSegments","elements","updateArray","rawQuery","checkAfServer","queryProps","onRunQuery","defaults","display","piPointConfig","onIsPiPointChange","InlineFieldRow","grow","Input","onBlur","SegmentAsync","Component","onSegmentChange","loadOptions","allowCustomValue","inputMinWidth","disabled","getAttributeSegmentsPI","reloadOptionsOnChange","Segment","onAttributeChange","getAttributeSegmentsAF","attributeSegment","useUnitConfig","maxNumber","parseInt","search","constructor","super","calculationBasisSegment","noDataReplacementSegment","segmentChangeValue","Promise","resolve","remove","currentSegment","afServerWebId","items","altSegments","variables","getVariables","variable","attributeText","forOwn","val","buildFromTarget","segmentsArray","attributesArray","summariesArray","cb","scopedVarsDone","componentDidMount","initialLoad","componentDidUpdate","force","_segmentsArray","e","console","elementPath","join","isValidQuery","trim","targetSplit","queryChange","bind","metricQueryTransform","response","Name","HasChildren","Items","PiWebAPIAnnotationsQueryEditor","memo","annotation","afWebId","setAfWebId","database","setDatabase","getValue","getAssetServer","AsyncSelect","getDatabases","dbs","loadingMessage","template","defaultOptions","getEventFrameTemplates","templ","showEndTime","currentTarget","categoryName","nameFilter","PiWebAPIDatasource","DataSourceWithBackend","applyTemplateVariables","log","targets","isAnnotation","buildQueryParameters","of","queryOptions","ds","querydepth","JSON","parse","Math","max","min","getAssetServers","server","getDatabase","db","getDatabaseElements","selectedFields","getElement","element","getElements","getAttributes","searchFullHierarchy","getDataServers","piPointSearch","reject","hide","maxDataPoints","tr","parseRawQuery","tar","att","refId","webid","startTime","range","from","endTime","to","annon","annotationOptions","events","currentLocale","Intl","DateTimeFormat","resolvedOptions","locale","values","transformDataFrameToMap","i","RegExp","Date","toLocaleString","time","timeEnd","id","tags","dataFrame","fields","field","toArray","observable","backendSrv","fetch","method","headers","firstValueFrom","restGet","getDataServer","serverId","databaseId","InstanceType","getElementTemplates","elementId","querystring","filter1","filter2","doFilter","m","exec","lastIndex","groupIndex","results","instanceSettings","getTemplateSrv","getBackendSrv","newFormatConfig","annotations","QueryEditor","prepareQuery","anno","queryType","processEvents","eventFrameToAnnotation","all","plugin","DataSourcePlugin","setQueryEditor","setConfigEditor"],"sourceRoot":""}